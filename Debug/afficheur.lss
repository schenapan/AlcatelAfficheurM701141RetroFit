
afficheur.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000092  00800100  00800100  00001170  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  000011e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013c0  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b68  00000000  00000000  000027f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000023eb  00000000  00000000  00003360  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000710  00000000  00000000  0000574c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000849e  00000000  00000000  00005e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d9b  00000000  00000000  0000e2fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  0000f095  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003336  00000000  00000000  0000f25d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 b4 04 	jmp	0x968	; 0x968 <__vector_18>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	ec ef       	ldi	r30, 0xFC	; 252
      90:	f0 e1       	ldi	r31, 0x10	; 16
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a0 30       	cpi	r26, 0x00	; 0
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	21 e0       	ldi	r18, 0x01	; 1
      a0:	a0 e0       	ldi	r26, 0x00	; 0
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a2 39       	cpi	r26, 0x92	; 146
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <main>
      b2:	0c 94 7c 08 	jmp	0x10f8	; 0x10f8 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
      ba:	cf 93       	push	r28
      bc:	df 93       	push	r29
      be:	cd b7       	in	r28, 0x3d	; 61
      c0:	de b7       	in	r29, 0x3e	; 62
	system_init();
      c2:	0e 94 17 08 	call	0x102e	; 0x102e <system_init>
}
      c6:	00 00       	nop
      c8:	df 91       	pop	r29
      ca:	cf 91       	pop	r28
      cc:	08 95       	ret

000000ce <PORTA_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTA_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
      ce:	cf 93       	push	r28
      d0:	df 93       	push	r29
      d2:	00 d0       	rcall	.+0      	; 0xd4 <PORTA_set_port_dir+0x6>
      d4:	cd b7       	in	r28, 0x3d	; 61
      d6:	de b7       	in	r29, 0x3e	; 62
      d8:	89 83       	std	Y+1, r24	; 0x01
      da:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
      dc:	8a 81       	ldd	r24, Y+2	; 0x02
      de:	88 2f       	mov	r24, r24
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	81 30       	cpi	r24, 0x01	; 1
      e4:	91 05       	cpc	r25, r1
      e6:	99 f0       	breq	.+38     	; 0x10e <PORTA_set_port_dir+0x40>
      e8:	82 30       	cpi	r24, 0x02	; 2
      ea:	91 05       	cpc	r25, r1
      ec:	d9 f0       	breq	.+54     	; 0x124 <PORTA_set_port_dir+0x56>
      ee:	89 2b       	or	r24, r25
      f0:	09 f0       	breq	.+2      	; 0xf4 <PORTA_set_port_dir+0x26>
		DDRA &= ~mask;

		PORTA |= mask;
		break;
	default:
		break;
      f2:	2f c0       	rjmp	.+94     	; 0x152 <PORTA_set_port_dir+0x84>
 */
static inline void PORTA_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRA &= ~mask;
      f4:	81 e2       	ldi	r24, 0x21	; 33
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	21 e2       	ldi	r18, 0x21	; 33
      fa:	30 e0       	ldi	r19, 0x00	; 0
      fc:	f9 01       	movw	r30, r18
      fe:	20 81       	ld	r18, Z
     100:	32 2f       	mov	r19, r18
     102:	29 81       	ldd	r18, Y+1	; 0x01
     104:	20 95       	com	r18
     106:	23 23       	and	r18, r19
     108:	fc 01       	movw	r30, r24
     10a:	20 83       	st	Z, r18
		break;
     10c:	22 c0       	rjmp	.+68     	; 0x152 <PORTA_set_port_dir+0x84>
	case PORT_DIR_OUT:
		DDRA |= mask;
     10e:	81 e2       	ldi	r24, 0x21	; 33
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	21 e2       	ldi	r18, 0x21	; 33
     114:	30 e0       	ldi	r19, 0x00	; 0
     116:	f9 01       	movw	r30, r18
     118:	30 81       	ld	r19, Z
     11a:	29 81       	ldd	r18, Y+1	; 0x01
     11c:	23 2b       	or	r18, r19
     11e:	fc 01       	movw	r30, r24
     120:	20 83       	st	Z, r18
		break;
     122:	17 c0       	rjmp	.+46     	; 0x152 <PORTA_set_port_dir+0x84>
	case PORT_DIR_OFF:
		DDRA &= ~mask;
     124:	81 e2       	ldi	r24, 0x21	; 33
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	21 e2       	ldi	r18, 0x21	; 33
     12a:	30 e0       	ldi	r19, 0x00	; 0
     12c:	f9 01       	movw	r30, r18
     12e:	20 81       	ld	r18, Z
     130:	32 2f       	mov	r19, r18
     132:	29 81       	ldd	r18, Y+1	; 0x01
     134:	20 95       	com	r18
     136:	23 23       	and	r18, r19
     138:	fc 01       	movw	r30, r24
     13a:	20 83       	st	Z, r18

		PORTA |= mask;
     13c:	82 e2       	ldi	r24, 0x22	; 34
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	22 e2       	ldi	r18, 0x22	; 34
     142:	30 e0       	ldi	r19, 0x00	; 0
     144:	f9 01       	movw	r30, r18
     146:	30 81       	ld	r19, Z
     148:	29 81       	ldd	r18, Y+1	; 0x01
     14a:	23 2b       	or	r18, r19
     14c:	fc 01       	movw	r30, r24
     14e:	20 83       	st	Z, r18
		break;
     150:	00 00       	nop
	default:
		break;
	}
}
     152:	00 00       	nop
     154:	0f 90       	pop	r0
     156:	0f 90       	pop	r0
     158:	df 91       	pop	r29
     15a:	cf 91       	pop	r28
     15c:	08 95       	ret

0000015e <PORTA_set_port_level>:
 *                  pin
 * \param[in] level true  = Pin levels set to "high" state
 *                  false = Pin levels set to "low" state
 */
static inline void PORTA_set_port_level(const uint8_t mask, const bool level)
{
     15e:	cf 93       	push	r28
     160:	df 93       	push	r29
     162:	00 d0       	rcall	.+0      	; 0x164 <PORTA_set_port_level+0x6>
     164:	cd b7       	in	r28, 0x3d	; 61
     166:	de b7       	in	r29, 0x3e	; 62
     168:	89 83       	std	Y+1, r24	; 0x01
     16a:	6a 83       	std	Y+2, r22	; 0x02
	if (level) {
     16c:	8a 81       	ldd	r24, Y+2	; 0x02
     16e:	88 23       	and	r24, r24
     170:	59 f0       	breq	.+22     	; 0x188 <PORTA_set_port_level+0x2a>
		PORTA |= mask;
     172:	82 e2       	ldi	r24, 0x22	; 34
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	22 e2       	ldi	r18, 0x22	; 34
     178:	30 e0       	ldi	r19, 0x00	; 0
     17a:	f9 01       	movw	r30, r18
     17c:	30 81       	ld	r19, Z
     17e:	29 81       	ldd	r18, Y+1	; 0x01
     180:	23 2b       	or	r18, r19
     182:	fc 01       	movw	r30, r24
     184:	20 83       	st	Z, r18
	} else {
		PORTA &= ~mask;
	}
}
     186:	0c c0       	rjmp	.+24     	; 0x1a0 <PORTA_set_port_level+0x42>
static inline void PORTA_set_port_level(const uint8_t mask, const bool level)
{
	if (level) {
		PORTA |= mask;
	} else {
		PORTA &= ~mask;
     188:	82 e2       	ldi	r24, 0x22	; 34
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	22 e2       	ldi	r18, 0x22	; 34
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	f9 01       	movw	r30, r18
     192:	20 81       	ld	r18, Z
     194:	32 2f       	mov	r19, r18
     196:	29 81       	ldd	r18, Y+1	; 0x01
     198:	20 95       	com	r18
     19a:	23 23       	and	r18, r19
     19c:	fc 01       	movw	r30, r24
     19e:	20 83       	st	Z, r18
	}
}
     1a0:	00 00       	nop
     1a2:	0f 90       	pop	r0
     1a4:	0f 90       	pop	r0
     1a6:	df 91       	pop	r29
     1a8:	cf 91       	pop	r28
     1aa:	08 95       	ret

000001ac <PORTA_write_port>:
 * Write directly to the entire port register.
 *
 * \param[in] value   Value to write
 */
static inline void PORTA_write_port(const uint8_t value)
{
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
     1b0:	1f 92       	push	r1
     1b2:	cd b7       	in	r28, 0x3d	; 61
     1b4:	de b7       	in	r29, 0x3e	; 62
     1b6:	89 83       	std	Y+1, r24	; 0x01
	PORTA = value;
     1b8:	82 e2       	ldi	r24, 0x22	; 34
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	29 81       	ldd	r18, Y+1	; 0x01
     1be:	fc 01       	movw	r30, r24
     1c0:	20 83       	st	Z, r18
}
     1c2:	00 00       	nop
     1c4:	0f 90       	pop	r0
     1c6:	df 91       	pop	r29
     1c8:	cf 91       	pop	r28
     1ca:	08 95       	ret

000001cc <PORTB_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTB_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
     1cc:	cf 93       	push	r28
     1ce:	df 93       	push	r29
     1d0:	00 d0       	rcall	.+0      	; 0x1d2 <PORTB_set_port_dir+0x6>
     1d2:	cd b7       	in	r28, 0x3d	; 61
     1d4:	de b7       	in	r29, 0x3e	; 62
     1d6:	89 83       	std	Y+1, r24	; 0x01
     1d8:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
     1da:	8a 81       	ldd	r24, Y+2	; 0x02
     1dc:	88 2f       	mov	r24, r24
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	81 30       	cpi	r24, 0x01	; 1
     1e2:	91 05       	cpc	r25, r1
     1e4:	99 f0       	breq	.+38     	; 0x20c <PORTB_set_port_dir+0x40>
     1e6:	82 30       	cpi	r24, 0x02	; 2
     1e8:	91 05       	cpc	r25, r1
     1ea:	d9 f0       	breq	.+54     	; 0x222 <PORTB_set_port_dir+0x56>
     1ec:	89 2b       	or	r24, r25
     1ee:	09 f0       	breq	.+2      	; 0x1f2 <PORTB_set_port_dir+0x26>
		DDRB &= ~mask;

		PORTB |= mask;
		break;
	default:
		break;
     1f0:	2f c0       	rjmp	.+94     	; 0x250 <PORTB_set_port_dir+0x84>
 */
static inline void PORTB_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~mask;
     1f2:	84 e2       	ldi	r24, 0x24	; 36
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	24 e2       	ldi	r18, 0x24	; 36
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	f9 01       	movw	r30, r18
     1fc:	20 81       	ld	r18, Z
     1fe:	32 2f       	mov	r19, r18
     200:	29 81       	ldd	r18, Y+1	; 0x01
     202:	20 95       	com	r18
     204:	23 23       	and	r18, r19
     206:	fc 01       	movw	r30, r24
     208:	20 83       	st	Z, r18
		break;
     20a:	22 c0       	rjmp	.+68     	; 0x250 <PORTB_set_port_dir+0x84>
	case PORT_DIR_OUT:
		DDRB |= mask;
     20c:	84 e2       	ldi	r24, 0x24	; 36
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	24 e2       	ldi	r18, 0x24	; 36
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	f9 01       	movw	r30, r18
     216:	30 81       	ld	r19, Z
     218:	29 81       	ldd	r18, Y+1	; 0x01
     21a:	23 2b       	or	r18, r19
     21c:	fc 01       	movw	r30, r24
     21e:	20 83       	st	Z, r18
		break;
     220:	17 c0       	rjmp	.+46     	; 0x250 <PORTB_set_port_dir+0x84>
	case PORT_DIR_OFF:
		DDRB &= ~mask;
     222:	84 e2       	ldi	r24, 0x24	; 36
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	24 e2       	ldi	r18, 0x24	; 36
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	f9 01       	movw	r30, r18
     22c:	20 81       	ld	r18, Z
     22e:	32 2f       	mov	r19, r18
     230:	29 81       	ldd	r18, Y+1	; 0x01
     232:	20 95       	com	r18
     234:	23 23       	and	r18, r19
     236:	fc 01       	movw	r30, r24
     238:	20 83       	st	Z, r18

		PORTB |= mask;
     23a:	85 e2       	ldi	r24, 0x25	; 37
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	25 e2       	ldi	r18, 0x25	; 37
     240:	30 e0       	ldi	r19, 0x00	; 0
     242:	f9 01       	movw	r30, r18
     244:	30 81       	ld	r19, Z
     246:	29 81       	ldd	r18, Y+1	; 0x01
     248:	23 2b       	or	r18, r19
     24a:	fc 01       	movw	r30, r24
     24c:	20 83       	st	Z, r18
		break;
     24e:	00 00       	nop
	default:
		break;
	}
}
     250:	00 00       	nop
     252:	0f 90       	pop	r0
     254:	0f 90       	pop	r0
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	08 95       	ret

0000025c <PORTB_set_port_level>:
 *                  pin
 * \param[in] level true  = Pin levels set to "high" state
 *                  false = Pin levels set to "low" state
 */
static inline void PORTB_set_port_level(const uint8_t mask, const bool level)
{
     25c:	cf 93       	push	r28
     25e:	df 93       	push	r29
     260:	00 d0       	rcall	.+0      	; 0x262 <PORTB_set_port_level+0x6>
     262:	cd b7       	in	r28, 0x3d	; 61
     264:	de b7       	in	r29, 0x3e	; 62
     266:	89 83       	std	Y+1, r24	; 0x01
     268:	6a 83       	std	Y+2, r22	; 0x02
	if (level) {
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	88 23       	and	r24, r24
     26e:	59 f0       	breq	.+22     	; 0x286 <PORTB_set_port_level+0x2a>
		PORTB |= mask;
     270:	85 e2       	ldi	r24, 0x25	; 37
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	25 e2       	ldi	r18, 0x25	; 37
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	f9 01       	movw	r30, r18
     27a:	30 81       	ld	r19, Z
     27c:	29 81       	ldd	r18, Y+1	; 0x01
     27e:	23 2b       	or	r18, r19
     280:	fc 01       	movw	r30, r24
     282:	20 83       	st	Z, r18
	} else {
		PORTB &= ~mask;
	}
}
     284:	0c c0       	rjmp	.+24     	; 0x29e <PORTB_set_port_level+0x42>
static inline void PORTB_set_port_level(const uint8_t mask, const bool level)
{
	if (level) {
		PORTB |= mask;
	} else {
		PORTB &= ~mask;
     286:	85 e2       	ldi	r24, 0x25	; 37
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	25 e2       	ldi	r18, 0x25	; 37
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	f9 01       	movw	r30, r18
     290:	20 81       	ld	r18, Z
     292:	32 2f       	mov	r19, r18
     294:	29 81       	ldd	r18, Y+1	; 0x01
     296:	20 95       	com	r18
     298:	23 23       	and	r18, r19
     29a:	fc 01       	movw	r30, r24
     29c:	20 83       	st	Z, r18
	}
}
     29e:	00 00       	nop
     2a0:	0f 90       	pop	r0
     2a2:	0f 90       	pop	r0
     2a4:	df 91       	pop	r29
     2a6:	cf 91       	pop	r28
     2a8:	08 95       	ret

000002aa <PORTC_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTC_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
     2ae:	00 d0       	rcall	.+0      	; 0x2b0 <PORTC_set_port_dir+0x6>
     2b0:	cd b7       	in	r28, 0x3d	; 61
     2b2:	de b7       	in	r29, 0x3e	; 62
     2b4:	89 83       	std	Y+1, r24	; 0x01
     2b6:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
     2b8:	8a 81       	ldd	r24, Y+2	; 0x02
     2ba:	88 2f       	mov	r24, r24
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	81 30       	cpi	r24, 0x01	; 1
     2c0:	91 05       	cpc	r25, r1
     2c2:	99 f0       	breq	.+38     	; 0x2ea <PORTC_set_port_dir+0x40>
     2c4:	82 30       	cpi	r24, 0x02	; 2
     2c6:	91 05       	cpc	r25, r1
     2c8:	d9 f0       	breq	.+54     	; 0x300 <PORTC_set_port_dir+0x56>
     2ca:	89 2b       	or	r24, r25
     2cc:	09 f0       	breq	.+2      	; 0x2d0 <PORTC_set_port_dir+0x26>
		DDRC &= ~mask;

		PORTC |= mask;
		break;
	default:
		break;
     2ce:	2f c0       	rjmp	.+94     	; 0x32e <PORTC_set_port_dir+0x84>
 */
static inline void PORTC_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRC &= ~mask;
     2d0:	87 e2       	ldi	r24, 0x27	; 39
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	27 e2       	ldi	r18, 0x27	; 39
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	f9 01       	movw	r30, r18
     2da:	20 81       	ld	r18, Z
     2dc:	32 2f       	mov	r19, r18
     2de:	29 81       	ldd	r18, Y+1	; 0x01
     2e0:	20 95       	com	r18
     2e2:	23 23       	and	r18, r19
     2e4:	fc 01       	movw	r30, r24
     2e6:	20 83       	st	Z, r18
		break;
     2e8:	22 c0       	rjmp	.+68     	; 0x32e <PORTC_set_port_dir+0x84>
	case PORT_DIR_OUT:
		DDRC |= mask;
     2ea:	87 e2       	ldi	r24, 0x27	; 39
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	27 e2       	ldi	r18, 0x27	; 39
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	f9 01       	movw	r30, r18
     2f4:	30 81       	ld	r19, Z
     2f6:	29 81       	ldd	r18, Y+1	; 0x01
     2f8:	23 2b       	or	r18, r19
     2fa:	fc 01       	movw	r30, r24
     2fc:	20 83       	st	Z, r18
		break;
     2fe:	17 c0       	rjmp	.+46     	; 0x32e <PORTC_set_port_dir+0x84>
	case PORT_DIR_OFF:
		DDRC &= ~mask;
     300:	87 e2       	ldi	r24, 0x27	; 39
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	27 e2       	ldi	r18, 0x27	; 39
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	f9 01       	movw	r30, r18
     30a:	20 81       	ld	r18, Z
     30c:	32 2f       	mov	r19, r18
     30e:	29 81       	ldd	r18, Y+1	; 0x01
     310:	20 95       	com	r18
     312:	23 23       	and	r18, r19
     314:	fc 01       	movw	r30, r24
     316:	20 83       	st	Z, r18

		PORTC |= mask;
     318:	88 e2       	ldi	r24, 0x28	; 40
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	28 e2       	ldi	r18, 0x28	; 40
     31e:	30 e0       	ldi	r19, 0x00	; 0
     320:	f9 01       	movw	r30, r18
     322:	30 81       	ld	r19, Z
     324:	29 81       	ldd	r18, Y+1	; 0x01
     326:	23 2b       	or	r18, r19
     328:	fc 01       	movw	r30, r24
     32a:	20 83       	st	Z, r18
		break;
     32c:	00 00       	nop
	default:
		break;
	}
}
     32e:	00 00       	nop
     330:	0f 90       	pop	r0
     332:	0f 90       	pop	r0
     334:	df 91       	pop	r29
     336:	cf 91       	pop	r28
     338:	08 95       	ret

0000033a <PORTC_set_port_level>:
 *                  pin
 * \param[in] level true  = Pin levels set to "high" state
 *                  false = Pin levels set to "low" state
 */
static inline void PORTC_set_port_level(const uint8_t mask, const bool level)
{
     33a:	cf 93       	push	r28
     33c:	df 93       	push	r29
     33e:	00 d0       	rcall	.+0      	; 0x340 <PORTC_set_port_level+0x6>
     340:	cd b7       	in	r28, 0x3d	; 61
     342:	de b7       	in	r29, 0x3e	; 62
     344:	89 83       	std	Y+1, r24	; 0x01
     346:	6a 83       	std	Y+2, r22	; 0x02
	if (level) {
     348:	8a 81       	ldd	r24, Y+2	; 0x02
     34a:	88 23       	and	r24, r24
     34c:	59 f0       	breq	.+22     	; 0x364 <PORTC_set_port_level+0x2a>
		PORTC |= mask;
     34e:	88 e2       	ldi	r24, 0x28	; 40
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	28 e2       	ldi	r18, 0x28	; 40
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	f9 01       	movw	r30, r18
     358:	30 81       	ld	r19, Z
     35a:	29 81       	ldd	r18, Y+1	; 0x01
     35c:	23 2b       	or	r18, r19
     35e:	fc 01       	movw	r30, r24
     360:	20 83       	st	Z, r18
	} else {
		PORTC &= ~mask;
	}
}
     362:	0c c0       	rjmp	.+24     	; 0x37c <PORTC_set_port_level+0x42>
static inline void PORTC_set_port_level(const uint8_t mask, const bool level)
{
	if (level) {
		PORTC |= mask;
	} else {
		PORTC &= ~mask;
     364:	88 e2       	ldi	r24, 0x28	; 40
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	28 e2       	ldi	r18, 0x28	; 40
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	f9 01       	movw	r30, r18
     36e:	20 81       	ld	r18, Z
     370:	32 2f       	mov	r19, r18
     372:	29 81       	ldd	r18, Y+1	; 0x01
     374:	20 95       	com	r18
     376:	23 23       	and	r18, r19
     378:	fc 01       	movw	r30, r24
     37a:	20 83       	st	Z, r18
	}
}
     37c:	00 00       	nop
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	df 91       	pop	r29
     384:	cf 91       	pop	r28
     386:	08 95       	ret

00000388 <dispSetColumnsOff>:
#define DISP_DIGIT_PORT_A_CLOCK_MASK (DISP_DIGIT_12_CLK_MASK)
#define DISP_DIGIT_PORT_B_CLOCK_MASK (0xFF)
#define DISP_DIGIT_PORT_C_CLOCK_MASK (DISP_DIGIT_9_CLK_MASK|DISP_DIGIT_10_CLK_MASK|DISP_DIGIT_11_CLK_MASK)


static inline void dispSetColumnsOff(void){ PORTC_set_port_level(DISP_LED_COLUMNS_MASK, true); }
     388:	cf 93       	push	r28
     38a:	df 93       	push	r29
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
     390:	61 e0       	ldi	r22, 0x01	; 1
     392:	83 ee       	ldi	r24, 0xE3	; 227
     394:	0e 94 9d 01 	call	0x33a	; 0x33a <PORTC_set_port_level>
     398:	00 00       	nop
     39a:	df 91       	pop	r29
     39c:	cf 91       	pop	r28
     39e:	08 95       	ret

000003a0 <dispSetLineLedsOff>:

static inline void dispSetLineLedsOff(void)
{
     3a0:	cf 93       	push	r28
     3a2:	df 93       	push	r29
     3a4:	cd b7       	in	r28, 0x3d	; 61
     3a6:	de b7       	in	r29, 0x3e	; 62
	// load register with off value for line leds 1-7
	PORTA_set_port_level(DISP_LINE_LEDS_MASK, true);
     3a8:	61 e0       	ldi	r22, 0x01	; 1
     3aa:	8d ef       	ldi	r24, 0xFD	; 253
     3ac:	0e 94 af 00 	call	0x15e	; 0x15e <PORTA_set_port_level>
	// clock digit 1-8
	PORTB_set_port_level(DISP_DIGIT_PORT_A_CLOCK_MASK, false);
     3b0:	60 e0       	ldi	r22, 0x00	; 0
     3b2:	82 e0       	ldi	r24, 0x02	; 2
     3b4:	0e 94 2e 01 	call	0x25c	; 0x25c <PORTB_set_port_level>
	PORTB_set_port_level(DISP_DIGIT_PORT_A_CLOCK_MASK, true);
     3b8:	61 e0       	ldi	r22, 0x01	; 1
     3ba:	82 e0       	ldi	r24, 0x02	; 2
     3bc:	0e 94 2e 01 	call	0x25c	; 0x25c <PORTB_set_port_level>
	PORTB_set_port_level(DISP_DIGIT_PORT_A_CLOCK_MASK, false);
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	82 e0       	ldi	r24, 0x02	; 2
     3c4:	0e 94 2e 01 	call	0x25c	; 0x25c <PORTB_set_port_level>
	PORTC_set_port_level(DISP_DIGIT_PORT_C_CLOCK_MASK, false);
	PORTC_set_port_level(DISP_DIGIT_PORT_C_CLOCK_MASK, true);
	PORTC_set_port_level(DISP_DIGIT_PORT_C_CLOCK_MASK, false);
	#endif
	// clock digit 12
	PORTA_set_port_level(DISP_DIGIT_PORT_A_CLOCK_MASK, false);
     3c8:	60 e0       	ldi	r22, 0x00	; 0
     3ca:	82 e0       	ldi	r24, 0x02	; 2
     3cc:	0e 94 af 00 	call	0x15e	; 0x15e <PORTA_set_port_level>
	PORTA_set_port_level(DISP_DIGIT_PORT_A_CLOCK_MASK, true);
     3d0:	61 e0       	ldi	r22, 0x01	; 1
     3d2:	82 e0       	ldi	r24, 0x02	; 2
     3d4:	0e 94 af 00 	call	0x15e	; 0x15e <PORTA_set_port_level>
	PORTA_set_port_level(DISP_DIGIT_PORT_A_CLOCK_MASK, false);
     3d8:	60 e0       	ldi	r22, 0x00	; 0
     3da:	82 e0       	ldi	r24, 0x02	; 2
     3dc:	0e 94 af 00 	call	0x15e	; 0x15e <PORTA_set_port_level>
}
     3e0:	00 00       	nop
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	08 95       	ret

000003e8 <dispAsyncApply>:
// real array display a column
void dispColumn( uint8_t i_column_number );

// load shadow array to real display
static inline void dispAsyncApply( void )
{
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	1f 92       	push	r1
     3ee:	cd b7       	in	r28, 0x3d	; 61
     3f0:	de b7       	in	r29, 0x3e	; 62
	for( uint8_t loop=0; loop<DISP_NB_DIGITS; loop++ )
     3f2:	19 82       	std	Y+1, r1	; 0x01
     3f4:	30 c0       	rjmp	.+96     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
	{
		if( dips_digit_ctrl[loop].apply )
     3f6:	89 81       	ldd	r24, Y+1	; 0x01
     3f8:	88 2f       	mov	r24, r24
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	8a 57       	subi	r24, 0x7A	; 122
     3fe:	9e 4f       	sbci	r25, 0xFE	; 254
     400:	fc 01       	movw	r30, r24
     402:	80 81       	ld	r24, Z
     404:	88 23       	and	r24, r24
     406:	21 f1       	breq	.+72     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		{
			memcpy( disp_led_array[loop], disp_led_array_shadow[loop], DISP_NB_COLUMNS );
     408:	89 81       	ldd	r24, Y+1	; 0x01
     40a:	28 2f       	mov	r18, r24
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	c9 01       	movw	r24, r18
     410:	88 0f       	add	r24, r24
     412:	99 1f       	adc	r25, r25
     414:	88 0f       	add	r24, r24
     416:	99 1f       	adc	r25, r25
     418:	82 0f       	add	r24, r18
     41a:	93 1f       	adc	r25, r19
     41c:	bc 01       	movw	r22, r24
     41e:	62 5f       	subi	r22, 0xF2	; 242
     420:	7e 4f       	sbci	r23, 0xFE	; 254
     422:	89 81       	ldd	r24, Y+1	; 0x01
     424:	28 2f       	mov	r18, r24
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	c9 01       	movw	r24, r18
     42a:	88 0f       	add	r24, r24
     42c:	99 1f       	adc	r25, r25
     42e:	88 0f       	add	r24, r24
     430:	99 1f       	adc	r25, r25
     432:	82 0f       	add	r24, r18
     434:	93 1f       	adc	r25, r19
     436:	86 5b       	subi	r24, 0xB6	; 182
     438:	9e 4f       	sbci	r25, 0xFE	; 254
     43a:	45 e0       	ldi	r20, 0x05	; 5
     43c:	50 e0       	ldi	r21, 0x00	; 0
     43e:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <memcpy>
			dips_digit_ctrl[loop].apply = false;
     442:	89 81       	ldd	r24, Y+1	; 0x01
     444:	88 2f       	mov	r24, r24
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	8a 57       	subi	r24, 0x7A	; 122
     44a:	9e 4f       	sbci	r25, 0xFE	; 254
     44c:	fc 01       	movw	r30, r24
     44e:	10 82       	st	Z, r1
void dispColumn( uint8_t i_column_number );

// load shadow array to real display
static inline void dispAsyncApply( void )
{
	for( uint8_t loop=0; loop<DISP_NB_DIGITS; loop++ )
     450:	89 81       	ldd	r24, Y+1	; 0x01
     452:	8f 5f       	subi	r24, 0xFF	; 255
     454:	89 83       	std	Y+1, r24	; 0x01
     456:	89 81       	ldd	r24, Y+1	; 0x01
     458:	8c 30       	cpi	r24, 0x0C	; 12
     45a:	68 f2       	brcs	.-102    	; 0x3f6 <dispAsyncApply+0xe>
		{
			memcpy( disp_led_array[loop], disp_led_array_shadow[loop], DISP_NB_COLUMNS );
			dips_digit_ctrl[loop].apply = false;
		}
	}
}
     45c:	00 00       	nop
     45e:	0f 90       	pop	r0
     460:	df 91       	pop	r29
     462:	cf 91       	pop	r28
     464:	08 95       	ret

00000466 <dispInit>:


void dispInit(void)
{
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62
	// set IO to output
	PORTA_set_port_dir(0xFF, PORT_DIR_OUT);
     46e:	61 e0       	ldi	r22, 0x01	; 1
     470:	8f ef       	ldi	r24, 0xFF	; 255
     472:	0e 94 67 00 	call	0xce	; 0xce <PORTA_set_port_dir>
	PORTB_set_port_dir(0xFF, PORT_DIR_OUT);
     476:	61 e0       	ldi	r22, 0x01	; 1
     478:	8f ef       	ldi	r24, 0xFF	; 255
     47a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <PORTB_set_port_dir>
	PORTC_set_port_dir(0xFF, PORT_DIR_OUT);
     47e:	61 e0       	ldi	r22, 0x01	; 1
     480:	8f ef       	ldi	r24, 0xFF	; 255
     482:	0e 94 55 01 	call	0x2aa	; 0x2aa <PORTC_set_port_dir>
	
	// default level
	// column off
	dispSetColumnsOff();
     486:	0e 94 c4 01 	call	0x388	; 0x388 <dispSetColumnsOff>

	// LINEs led off
	dispSetLineLedsOff();
     48a:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <dispSetLineLedsOff>
	
	// update array to off
	dispSetAllLedsOff();
     48e:	0e 94 ce 02 	call	0x59c	; 0x59c <dispSetAllLedsOff>
	dispApply();
     492:	0e 94 f7 02 	call	0x5ee	; 0x5ee <dispApply>
	
	// get reference time
	disp_ref_time = getUsCounter();
     496:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <getUsCounter>
     49a:	dc 01       	movw	r26, r24
     49c:	cb 01       	movw	r24, r22
     49e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
     4a2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
     4a6:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_end+0x2>
     4aa:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_end+0x3>
}
     4ae:	00 00       	nop
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	08 95       	ret

000004b6 <dispTick>:

void dispTick(void)
{
     4b6:	ef 92       	push	r14
     4b8:	ff 92       	push	r15
     4ba:	0f 93       	push	r16
     4bc:	1f 93       	push	r17
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	cd b7       	in	r28, 0x3d	; 61
     4c4:	de b7       	in	r29, 0x3e	; 62
	static uint8_t l_current_column = 0;
	
	// do waiting operation if first digit
	dispAsyncApply();
     4c6:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <dispAsyncApply>
	
	
	// refresh one column display every 4ms
	if( (uint32_t)(getUsCounter()-disp_ref_time) > DISP_COLUMN_REFRESH_RATE_US )
     4ca:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <getUsCounter>
     4ce:	9b 01       	movw	r18, r22
     4d0:	ac 01       	movw	r20, r24
     4d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
     4d6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
     4da:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_end+0x2>
     4de:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_end+0x3>
     4e2:	79 01       	movw	r14, r18
     4e4:	8a 01       	movw	r16, r20
     4e6:	e8 1a       	sub	r14, r24
     4e8:	f9 0a       	sbc	r15, r25
     4ea:	0a 0b       	sbc	r16, r26
     4ec:	1b 0b       	sbc	r17, r27
     4ee:	d8 01       	movw	r26, r16
     4f0:	c7 01       	movw	r24, r14
     4f2:	81 3a       	cpi	r24, 0xA1	; 161
     4f4:	9f 40       	sbci	r25, 0x0F	; 15
     4f6:	a1 05       	cpc	r26, r1
     4f8:	b1 05       	cpc	r27, r1
     4fa:	18 f1       	brcs	.+70     	; 0x542 <dispTick+0x8c>
	{
		// update time
		disp_ref_time += DISP_COLUMN_REFRESH_RATE_US;
     4fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
     500:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
     504:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_end+0x2>
     508:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_end+0x3>
     50c:	80 56       	subi	r24, 0x60	; 96
     50e:	90 4f       	sbci	r25, 0xF0	; 240
     510:	af 4f       	sbci	r26, 0xFF	; 255
     512:	bf 4f       	sbci	r27, 0xFF	; 255
     514:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
     518:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
     51c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_end+0x2>
     520:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_end+0x3>
		
		// refresh column
		dispColumn( l_current_column );
     524:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <l_current_column.2200>
     528:	0e 94 b9 03 	call	0x772	; 0x772 <dispColumn>
			
		// next column
		l_current_column++;
     52c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <l_current_column.2200>
     530:	8f 5f       	subi	r24, 0xFF	; 255
     532:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <l_current_column.2200>
		if( l_current_column >= DISP_NB_COLUMNS ){ l_current_column = 0; }
     536:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <l_current_column.2200>
     53a:	85 30       	cpi	r24, 0x05	; 5
     53c:	10 f0       	brcs	.+4      	; 0x542 <dispTick+0x8c>
     53e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <l_current_column.2200>
	}
}
     542:	00 00       	nop
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	1f 91       	pop	r17
     54a:	0f 91       	pop	r16
     54c:	ff 90       	pop	r15
     54e:	ef 90       	pop	r14
     550:	08 95       	ret

00000552 <dispSetDigitLedsOff>:

// set digit shadows array all led to on or off
void dispSetDigitLedsOff( uint8_t i_digit, bool i_Off )
{
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	00 d0       	rcall	.+0      	; 0x558 <dispSetDigitLedsOff+0x6>
     558:	cd b7       	in	r28, 0x3d	; 61
     55a:	de b7       	in	r29, 0x3e	; 62
     55c:	89 83       	std	Y+1, r24	; 0x01
     55e:	6a 83       	std	Y+2, r22	; 0x02
	memset( disp_led_array_shadow[i_digit], i_Off?DISP_LINE_LEDS_MASK:0, DISP_NB_COLUMNS );
     560:	8a 81       	ldd	r24, Y+2	; 0x02
     562:	88 23       	and	r24, r24
     564:	19 f0       	breq	.+6      	; 0x56c <dispSetDigitLedsOff+0x1a>
     566:	6d ef       	ldi	r22, 0xFD	; 253
     568:	7f ef       	ldi	r23, 0xFF	; 255
     56a:	02 c0       	rjmp	.+4      	; 0x570 <dispSetDigitLedsOff+0x1e>
     56c:	60 e0       	ldi	r22, 0x00	; 0
     56e:	70 e0       	ldi	r23, 0x00	; 0
     570:	89 81       	ldd	r24, Y+1	; 0x01
     572:	28 2f       	mov	r18, r24
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	c9 01       	movw	r24, r18
     578:	88 0f       	add	r24, r24
     57a:	99 1f       	adc	r25, r25
     57c:	88 0f       	add	r24, r24
     57e:	99 1f       	adc	r25, r25
     580:	82 0f       	add	r24, r18
     582:	93 1f       	adc	r25, r19
     584:	82 5f       	subi	r24, 0xF2	; 242
     586:	9e 4f       	sbci	r25, 0xFE	; 254
     588:	45 e0       	ldi	r20, 0x05	; 5
     58a:	50 e0       	ldi	r21, 0x00	; 0
     58c:	0e 94 75 08 	call	0x10ea	; 0x10ea <memset>
}
     590:	00 00       	nop
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	08 95       	ret

0000059c <dispSetAllLedsOff>:

// set shadow array all digits to off
void dispSetAllLedsOff( void )
{
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
     5a0:	1f 92       	push	r1
     5a2:	cd b7       	in	r28, 0x3d	; 61
     5a4:	de b7       	in	r29, 0x3e	; 62
	for( uint8_t loop=0; loop<DISP_NB_DIGITS; loop++ ) { dispSetDigitLedsOff( loop, true ); }
     5a6:	19 82       	std	Y+1, r1	; 0x01
     5a8:	07 c0       	rjmp	.+14     	; 0x5b8 <dispSetAllLedsOff+0x1c>
     5aa:	61 e0       	ldi	r22, 0x01	; 1
     5ac:	89 81       	ldd	r24, Y+1	; 0x01
     5ae:	0e 94 a9 02 	call	0x552	; 0x552 <dispSetDigitLedsOff>
     5b2:	89 81       	ldd	r24, Y+1	; 0x01
     5b4:	8f 5f       	subi	r24, 0xFF	; 255
     5b6:	89 83       	std	Y+1, r24	; 0x01
     5b8:	89 81       	ldd	r24, Y+1	; 0x01
     5ba:	8c 30       	cpi	r24, 0x0C	; 12
     5bc:	b0 f3       	brcs	.-20     	; 0x5aa <dispSetAllLedsOff+0xe>
}
     5be:	00 00       	nop
     5c0:	0f 90       	pop	r0
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	08 95       	ret

000005c8 <dispApplyDigit>:

// load shadow digit array to real display
void dispApplyDigit( uint8_t i_digit )
{
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
     5cc:	1f 92       	push	r1
     5ce:	cd b7       	in	r28, 0x3d	; 61
     5d0:	de b7       	in	r29, 0x3e	; 62
     5d2:	89 83       	std	Y+1, r24	; 0x01
	dips_digit_ctrl[i_digit].apply = true;
     5d4:	89 81       	ldd	r24, Y+1	; 0x01
     5d6:	88 2f       	mov	r24, r24
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	8a 57       	subi	r24, 0x7A	; 122
     5dc:	9e 4f       	sbci	r25, 0xFE	; 254
     5de:	21 e0       	ldi	r18, 0x01	; 1
     5e0:	fc 01       	movw	r30, r24
     5e2:	20 83       	st	Z, r18
}
     5e4:	00 00       	nop
     5e6:	0f 90       	pop	r0
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	08 95       	ret

000005ee <dispApply>:

// load shadow array to real display
void dispApply( void )
{
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
     5f2:	1f 92       	push	r1
     5f4:	cd b7       	in	r28, 0x3d	; 61
     5f6:	de b7       	in	r29, 0x3e	; 62
	for( uint8_t loop=0; loop<DISP_NB_DIGITS; loop++ ) { dispApplyDigit(loop); }
     5f8:	19 82       	std	Y+1, r1	; 0x01
     5fa:	06 c0       	rjmp	.+12     	; 0x608 <dispApply+0x1a>
     5fc:	89 81       	ldd	r24, Y+1	; 0x01
     5fe:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <dispApplyDigit>
     602:	89 81       	ldd	r24, Y+1	; 0x01
     604:	8f 5f       	subi	r24, 0xFF	; 255
     606:	89 83       	std	Y+1, r24	; 0x01
     608:	89 81       	ldd	r24, Y+1	; 0x01
     60a:	8c 30       	cpi	r24, 0x0C	; 12
     60c:	b8 f3       	brcs	.-18     	; 0x5fc <dispApply+0xe>
}
     60e:	00 00       	nop
     610:	0f 90       	pop	r0
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	08 95       	ret

00000618 <dispToggleLed>:

void dispToggleLed( uint8_t i_digit, uint8_t i_line, uint8_t i_column )
{
     618:	cf 93       	push	r28
     61a:	df 93       	push	r29
     61c:	00 d0       	rcall	.+0      	; 0x61e <dispToggleLed+0x6>
     61e:	00 d0       	rcall	.+0      	; 0x620 <dispToggleLed+0x8>
     620:	1f 92       	push	r1
     622:	cd b7       	in	r28, 0x3d	; 61
     624:	de b7       	in	r29, 0x3e	; 62
     626:	8b 83       	std	Y+3, r24	; 0x03
     628:	6c 83       	std	Y+4, r22	; 0x04
     62a:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t l_led_mask;
	uint8_t l_led_value;
	
	if( 0 == i_line ){ l_led_mask = DISP_LED_LINE_1_MASK; }
     62c:	8c 81       	ldd	r24, Y+4	; 0x04
     62e:	88 23       	and	r24, r24
     630:	19 f4       	brne	.+6      	; 0x638 <dispToggleLed+0x20>
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	89 83       	std	Y+1, r24	; 0x01
     636:	23 c0       	rjmp	.+70     	; 0x67e <dispToggleLed+0x66>
	else if( 1 == i_line ){ l_led_mask = DISP_LED_LINE_2_MASK; }
     638:	8c 81       	ldd	r24, Y+4	; 0x04
     63a:	81 30       	cpi	r24, 0x01	; 1
     63c:	19 f4       	brne	.+6      	; 0x644 <dispToggleLed+0x2c>
     63e:	80 e8       	ldi	r24, 0x80	; 128
     640:	89 83       	std	Y+1, r24	; 0x01
     642:	1d c0       	rjmp	.+58     	; 0x67e <dispToggleLed+0x66>
	else if( 2 == i_line ){ l_led_mask = DISP_LED_LINE_3_MASK; }
     644:	8c 81       	ldd	r24, Y+4	; 0x04
     646:	82 30       	cpi	r24, 0x02	; 2
     648:	19 f4       	brne	.+6      	; 0x650 <dispToggleLed+0x38>
     64a:	80 e4       	ldi	r24, 0x40	; 64
     64c:	89 83       	std	Y+1, r24	; 0x01
     64e:	17 c0       	rjmp	.+46     	; 0x67e <dispToggleLed+0x66>
	else if( 3 == i_line ){ l_led_mask = DISP_LED_LINE_4_MASK; }
     650:	8c 81       	ldd	r24, Y+4	; 0x04
     652:	83 30       	cpi	r24, 0x03	; 3
     654:	19 f4       	brne	.+6      	; 0x65c <dispToggleLed+0x44>
     656:	80 e2       	ldi	r24, 0x20	; 32
     658:	89 83       	std	Y+1, r24	; 0x01
     65a:	11 c0       	rjmp	.+34     	; 0x67e <dispToggleLed+0x66>
	else if( 4 == i_line ){ l_led_mask = DISP_LED_LINE_5_MASK; }
     65c:	8c 81       	ldd	r24, Y+4	; 0x04
     65e:	84 30       	cpi	r24, 0x04	; 4
     660:	19 f4       	brne	.+6      	; 0x668 <dispToggleLed+0x50>
     662:	80 e1       	ldi	r24, 0x10	; 16
     664:	89 83       	std	Y+1, r24	; 0x01
     666:	0b c0       	rjmp	.+22     	; 0x67e <dispToggleLed+0x66>
	else if( 5 == i_line ){ l_led_mask = DISP_LED_LINE_6_MASK; }
     668:	8c 81       	ldd	r24, Y+4	; 0x04
     66a:	85 30       	cpi	r24, 0x05	; 5
     66c:	19 f4       	brne	.+6      	; 0x674 <dispToggleLed+0x5c>
     66e:	88 e0       	ldi	r24, 0x08	; 8
     670:	89 83       	std	Y+1, r24	; 0x01
     672:	05 c0       	rjmp	.+10     	; 0x67e <dispToggleLed+0x66>
	else if( 6 == i_line ){ l_led_mask = DISP_LED_LINE_7_MASK; }
     674:	8c 81       	ldd	r24, Y+4	; 0x04
     676:	86 30       	cpi	r24, 0x06	; 6
     678:	11 f4       	brne	.+4      	; 0x67e <dispToggleLed+0x66>
     67a:	84 e0       	ldi	r24, 0x04	; 4
     67c:	89 83       	std	Y+1, r24	; 0x01
		
	// reverse pixel value
	l_led_value = disp_led_array_shadow[i_digit][i_column] & l_led_mask;
     67e:	8b 81       	ldd	r24, Y+3	; 0x03
     680:	28 2f       	mov	r18, r24
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	8d 81       	ldd	r24, Y+5	; 0x05
     686:	48 2f       	mov	r20, r24
     688:	50 e0       	ldi	r21, 0x00	; 0
     68a:	c9 01       	movw	r24, r18
     68c:	88 0f       	add	r24, r24
     68e:	99 1f       	adc	r25, r25
     690:	88 0f       	add	r24, r24
     692:	99 1f       	adc	r25, r25
     694:	82 0f       	add	r24, r18
     696:	93 1f       	adc	r25, r19
     698:	84 0f       	add	r24, r20
     69a:	95 1f       	adc	r25, r21
     69c:	82 5f       	subi	r24, 0xF2	; 242
     69e:	9e 4f       	sbci	r25, 0xFE	; 254
     6a0:	fc 01       	movw	r30, r24
     6a2:	90 81       	ld	r25, Z
     6a4:	89 81       	ldd	r24, Y+1	; 0x01
     6a6:	89 23       	and	r24, r25
     6a8:	8a 83       	std	Y+2, r24	; 0x02
	l_led_value = ~l_led_value;
     6aa:	8a 81       	ldd	r24, Y+2	; 0x02
     6ac:	80 95       	com	r24
     6ae:	8a 83       	std	Y+2, r24	; 0x02
	l_led_value &= l_led_mask;
     6b0:	9a 81       	ldd	r25, Y+2	; 0x02
     6b2:	89 81       	ldd	r24, Y+1	; 0x01
     6b4:	89 23       	and	r24, r25
     6b6:	8a 83       	std	Y+2, r24	; 0x02
		
	// set to 0
	disp_led_array_shadow[i_digit][i_column] &= ~l_led_mask;
     6b8:	8b 81       	ldd	r24, Y+3	; 0x03
     6ba:	28 2f       	mov	r18, r24
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	8d 81       	ldd	r24, Y+5	; 0x05
     6c0:	68 2f       	mov	r22, r24
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	8b 81       	ldd	r24, Y+3	; 0x03
     6c6:	48 2f       	mov	r20, r24
     6c8:	50 e0       	ldi	r21, 0x00	; 0
     6ca:	8d 81       	ldd	r24, Y+5	; 0x05
     6cc:	e8 2f       	mov	r30, r24
     6ce:	f0 e0       	ldi	r31, 0x00	; 0
     6d0:	ca 01       	movw	r24, r20
     6d2:	88 0f       	add	r24, r24
     6d4:	99 1f       	adc	r25, r25
     6d6:	88 0f       	add	r24, r24
     6d8:	99 1f       	adc	r25, r25
     6da:	84 0f       	add	r24, r20
     6dc:	95 1f       	adc	r25, r21
     6de:	8e 0f       	add	r24, r30
     6e0:	9f 1f       	adc	r25, r31
     6e2:	82 5f       	subi	r24, 0xF2	; 242
     6e4:	9e 4f       	sbci	r25, 0xFE	; 254
     6e6:	fc 01       	movw	r30, r24
     6e8:	80 81       	ld	r24, Z
     6ea:	98 2f       	mov	r25, r24
     6ec:	89 81       	ldd	r24, Y+1	; 0x01
     6ee:	80 95       	com	r24
     6f0:	89 23       	and	r24, r25
     6f2:	48 2f       	mov	r20, r24
     6f4:	c9 01       	movw	r24, r18
     6f6:	88 0f       	add	r24, r24
     6f8:	99 1f       	adc	r25, r25
     6fa:	88 0f       	add	r24, r24
     6fc:	99 1f       	adc	r25, r25
     6fe:	82 0f       	add	r24, r18
     700:	93 1f       	adc	r25, r19
     702:	86 0f       	add	r24, r22
     704:	97 1f       	adc	r25, r23
     706:	82 5f       	subi	r24, 0xF2	; 242
     708:	9e 4f       	sbci	r25, 0xFE	; 254
     70a:	fc 01       	movw	r30, r24
     70c:	40 83       	st	Z, r20
	// set to wanted value
	disp_led_array_shadow[i_digit][i_column] |= l_led_value;
     70e:	8b 81       	ldd	r24, Y+3	; 0x03
     710:	28 2f       	mov	r18, r24
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	8d 81       	ldd	r24, Y+5	; 0x05
     716:	68 2f       	mov	r22, r24
     718:	70 e0       	ldi	r23, 0x00	; 0
     71a:	8b 81       	ldd	r24, Y+3	; 0x03
     71c:	48 2f       	mov	r20, r24
     71e:	50 e0       	ldi	r21, 0x00	; 0
     720:	8d 81       	ldd	r24, Y+5	; 0x05
     722:	e8 2f       	mov	r30, r24
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	ca 01       	movw	r24, r20
     728:	88 0f       	add	r24, r24
     72a:	99 1f       	adc	r25, r25
     72c:	88 0f       	add	r24, r24
     72e:	99 1f       	adc	r25, r25
     730:	84 0f       	add	r24, r20
     732:	95 1f       	adc	r25, r21
     734:	8e 0f       	add	r24, r30
     736:	9f 1f       	adc	r25, r31
     738:	82 5f       	subi	r24, 0xF2	; 242
     73a:	9e 4f       	sbci	r25, 0xFE	; 254
     73c:	fc 01       	movw	r30, r24
     73e:	90 81       	ld	r25, Z
     740:	8a 81       	ldd	r24, Y+2	; 0x02
     742:	49 2f       	mov	r20, r25
     744:	48 2b       	or	r20, r24
     746:	c9 01       	movw	r24, r18
     748:	88 0f       	add	r24, r24
     74a:	99 1f       	adc	r25, r25
     74c:	88 0f       	add	r24, r24
     74e:	99 1f       	adc	r25, r25
     750:	82 0f       	add	r24, r18
     752:	93 1f       	adc	r25, r19
     754:	86 0f       	add	r24, r22
     756:	97 1f       	adc	r25, r23
     758:	82 5f       	subi	r24, 0xF2	; 242
     75a:	9e 4f       	sbci	r25, 0xFE	; 254
     75c:	fc 01       	movw	r30, r24
     75e:	40 83       	st	Z, r20
}
     760:	00 00       	nop
     762:	0f 90       	pop	r0
     764:	0f 90       	pop	r0
     766:	0f 90       	pop	r0
     768:	0f 90       	pop	r0
     76a:	0f 90       	pop	r0
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	08 95       	ret

00000772 <dispColumn>:


void dispColumn( uint8_t i_column_number )
{
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
     776:	1f 92       	push	r1
     778:	cd b7       	in	r28, 0x3d	; 61
     77a:	de b7       	in	r29, 0x3e	; 62
     77c:	89 83       	std	Y+1, r24	; 0x01
	// disable previous column
	if( 0 == i_column_number ){ PORTC_set_port_level(DISP_LED_COLUMN_5_MASK, true); }
     77e:	89 81       	ldd	r24, Y+1	; 0x01
     780:	88 23       	and	r24, r24
     782:	29 f4       	brne	.+10     	; 0x78e <dispColumn+0x1c>
     784:	61 e0       	ldi	r22, 0x01	; 1
     786:	80 e2       	ldi	r24, 0x20	; 32
     788:	0e 94 9d 01 	call	0x33a	; 0x33a <PORTC_set_port_level>
     78c:	1f c0       	rjmp	.+62     	; 0x7cc <dispColumn+0x5a>
	else if( 1 == i_column_number ){ PORTC_set_port_level(DISP_LED_COLUMN_1_MASK, true); }
     78e:	89 81       	ldd	r24, Y+1	; 0x01
     790:	81 30       	cpi	r24, 0x01	; 1
     792:	29 f4       	brne	.+10     	; 0x79e <dispColumn+0x2c>
     794:	61 e0       	ldi	r22, 0x01	; 1
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	0e 94 9d 01 	call	0x33a	; 0x33a <PORTC_set_port_level>
     79c:	17 c0       	rjmp	.+46     	; 0x7cc <dispColumn+0x5a>
	else if( 2 == i_column_number ){ PORTC_set_port_level(DISP_LED_COLUMN_2_MASK, true); }
     79e:	89 81       	ldd	r24, Y+1	; 0x01
     7a0:	82 30       	cpi	r24, 0x02	; 2
     7a2:	29 f4       	brne	.+10     	; 0x7ae <dispColumn+0x3c>
     7a4:	61 e0       	ldi	r22, 0x01	; 1
     7a6:	82 e0       	ldi	r24, 0x02	; 2
     7a8:	0e 94 9d 01 	call	0x33a	; 0x33a <PORTC_set_port_level>
     7ac:	0f c0       	rjmp	.+30     	; 0x7cc <dispColumn+0x5a>
	else if( 3 == i_column_number ){ PORTC_set_port_level(DISP_LED_COLUMN_3_MASK, true); }
     7ae:	89 81       	ldd	r24, Y+1	; 0x01
     7b0:	83 30       	cpi	r24, 0x03	; 3
     7b2:	29 f4       	brne	.+10     	; 0x7be <dispColumn+0x4c>
     7b4:	61 e0       	ldi	r22, 0x01	; 1
     7b6:	80 e8       	ldi	r24, 0x80	; 128
     7b8:	0e 94 9d 01 	call	0x33a	; 0x33a <PORTC_set_port_level>
     7bc:	07 c0       	rjmp	.+14     	; 0x7cc <dispColumn+0x5a>
	else if( 4 == i_column_number ){ PORTC_set_port_level(DISP_LED_COLUMN_4_MASK, true); }
     7be:	89 81       	ldd	r24, Y+1	; 0x01
     7c0:	84 30       	cpi	r24, 0x04	; 4
     7c2:	21 f4       	brne	.+8      	; 0x7cc <dispColumn+0x5a>
     7c4:	61 e0       	ldi	r22, 0x01	; 1
     7c6:	80 e4       	ldi	r24, 0x40	; 64
     7c8:	0e 94 9d 01 	call	0x33a	; 0x33a <PORTC_set_port_level>
		
	// load register digit by digit
	// digit 1
	PORTA_write_port( disp_led_array[0][i_column_number]&DISP_LINE_LEDS_MASK ); // load
     7cc:	89 81       	ldd	r24, Y+1	; 0x01
     7ce:	88 2f       	mov	r24, r24
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	86 5b       	subi	r24, 0xB6	; 182
     7d4:	9e 4f       	sbci	r25, 0xFE	; 254
     7d6:	fc 01       	movw	r30, r24
     7d8:	80 81       	ld	r24, Z
     7da:	8d 7f       	andi	r24, 0xFD	; 253
     7dc:	0e 94 d6 00 	call	0x1ac	; 0x1ac <PORTA_write_port>
	PORTB_set_port_level(DISP_DIGIT_1_CLK_MASK, true); // clock up
     7e0:	61 e0       	ldi	r22, 0x01	; 1
     7e2:	80 e8       	ldi	r24, 0x80	; 128
     7e4:	0e 94 2e 01 	call	0x25c	; 0x25c <PORTB_set_port_level>
	// digit 2
	PORTA_write_port( disp_led_array[1][i_column_number]&DISP_LINE_LEDS_MASK ); // load
     7e8:	89 81       	ldd	r24, Y+1	; 0x01
     7ea:	88 2f       	mov	r24, r24
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	81 5b       	subi	r24, 0xB1	; 177
     7f0:	9e 4f       	sbci	r25, 0xFE	; 254
     7f2:	fc 01       	movw	r30, r24
     7f4:	80 81       	ld	r24, Z
     7f6:	8d 7f       	andi	r24, 0xFD	; 253
     7f8:	0e 94 d6 00 	call	0x1ac	; 0x1ac <PORTA_write_port>
	PORTB_set_port_level(DISP_DIGIT_2_CLK_MASK, true); // clock up
     7fc:	61 e0       	ldi	r22, 0x01	; 1
     7fe:	80 e4       	ldi	r24, 0x40	; 64
     800:	0e 94 2e 01 	call	0x25c	; 0x25c <PORTB_set_port_level>
	// digit 3
	PORTA_write_port( disp_led_array[2][i_column_number]&DISP_LINE_LEDS_MASK ); // load
     804:	89 81       	ldd	r24, Y+1	; 0x01
     806:	88 2f       	mov	r24, r24
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	8c 5a       	subi	r24, 0xAC	; 172
     80c:	9e 4f       	sbci	r25, 0xFE	; 254
     80e:	fc 01       	movw	r30, r24
     810:	80 81       	ld	r24, Z
     812:	8d 7f       	andi	r24, 0xFD	; 253
     814:	0e 94 d6 00 	call	0x1ac	; 0x1ac <PORTA_write_port>
	PORTB_set_port_level(DISP_DIGIT_3_CLK_MASK, true); // clock up
     818:	61 e0       	ldi	r22, 0x01	; 1
     81a:	80 e2       	ldi	r24, 0x20	; 32
     81c:	0e 94 2e 01 	call	0x25c	; 0x25c <PORTB_set_port_level>
	// digit 4
	PORTA_write_port( disp_led_array[3][i_column_number]&DISP_LINE_LEDS_MASK ); // load
     820:	89 81       	ldd	r24, Y+1	; 0x01
     822:	88 2f       	mov	r24, r24
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	87 5a       	subi	r24, 0xA7	; 167
     828:	9e 4f       	sbci	r25, 0xFE	; 254
     82a:	fc 01       	movw	r30, r24
     82c:	80 81       	ld	r24, Z
     82e:	8d 7f       	andi	r24, 0xFD	; 253
     830:	0e 94 d6 00 	call	0x1ac	; 0x1ac <PORTA_write_port>
	PORTB_set_port_level(DISP_DIGIT_4_CLK_MASK, true); // clock up
     834:	61 e0       	ldi	r22, 0x01	; 1
     836:	80 e1       	ldi	r24, 0x10	; 16
     838:	0e 94 2e 01 	call	0x25c	; 0x25c <PORTB_set_port_level>
	// digit 5
	PORTA_write_port( disp_led_array[4][i_column_number]&DISP_LINE_LEDS_MASK ); // load
     83c:	89 81       	ldd	r24, Y+1	; 0x01
     83e:	88 2f       	mov	r24, r24
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	82 5a       	subi	r24, 0xA2	; 162
     844:	9e 4f       	sbci	r25, 0xFE	; 254
     846:	fc 01       	movw	r30, r24
     848:	80 81       	ld	r24, Z
     84a:	8d 7f       	andi	r24, 0xFD	; 253
     84c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <PORTA_write_port>
	PORTB_set_port_level(DISP_DIGIT_5_CLK_MASK, true); // clock up
     850:	61 e0       	ldi	r22, 0x01	; 1
     852:	88 e0       	ldi	r24, 0x08	; 8
     854:	0e 94 2e 01 	call	0x25c	; 0x25c <PORTB_set_port_level>
	// digit 6
	PORTA_write_port( disp_led_array[5][i_column_number]&DISP_LINE_LEDS_MASK ); // load
     858:	89 81       	ldd	r24, Y+1	; 0x01
     85a:	88 2f       	mov	r24, r24
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	8d 59       	subi	r24, 0x9D	; 157
     860:	9e 4f       	sbci	r25, 0xFE	; 254
     862:	fc 01       	movw	r30, r24
     864:	80 81       	ld	r24, Z
     866:	8d 7f       	andi	r24, 0xFD	; 253
     868:	0e 94 d6 00 	call	0x1ac	; 0x1ac <PORTA_write_port>
	PORTB_set_port_level(DISP_DIGIT_6_CLK_MASK, true); // clock up
     86c:	61 e0       	ldi	r22, 0x01	; 1
     86e:	84 e0       	ldi	r24, 0x04	; 4
     870:	0e 94 2e 01 	call	0x25c	; 0x25c <PORTB_set_port_level>
	// digit 7
	PORTA_write_port( disp_led_array[6][i_column_number]&DISP_LINE_LEDS_MASK ); // load
     874:	89 81       	ldd	r24, Y+1	; 0x01
     876:	88 2f       	mov	r24, r24
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	88 59       	subi	r24, 0x98	; 152
     87c:	9e 4f       	sbci	r25, 0xFE	; 254
     87e:	fc 01       	movw	r30, r24
     880:	80 81       	ld	r24, Z
     882:	8d 7f       	andi	r24, 0xFD	; 253
     884:	0e 94 d6 00 	call	0x1ac	; 0x1ac <PORTA_write_port>
	PORTB_set_port_level(DISP_DIGIT_7_CLK_MASK, true); // clock up
     888:	61 e0       	ldi	r22, 0x01	; 1
     88a:	82 e0       	ldi	r24, 0x02	; 2
     88c:	0e 94 2e 01 	call	0x25c	; 0x25c <PORTB_set_port_level>
	// digit 8
	PORTA_write_port( disp_led_array[7][i_column_number]&DISP_LINE_LEDS_MASK ); // load
     890:	89 81       	ldd	r24, Y+1	; 0x01
     892:	88 2f       	mov	r24, r24
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	83 59       	subi	r24, 0x93	; 147
     898:	9e 4f       	sbci	r25, 0xFE	; 254
     89a:	fc 01       	movw	r30, r24
     89c:	80 81       	ld	r24, Z
     89e:	8d 7f       	andi	r24, 0xFD	; 253
     8a0:	0e 94 d6 00 	call	0x1ac	; 0x1ac <PORTA_write_port>
	PORTB_set_port_level(DISP_DIGIT_8_CLK_MASK, true); // clock up
     8a4:	61 e0       	ldi	r22, 0x01	; 1
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	0e 94 2e 01 	call	0x25c	; 0x25c <PORTB_set_port_level>
	// digit 11
	PORTA_write_port( disp_led_array[10][i_column_number]&DISP_LINE_LEDS_MASK ); // load
	PORTC_set_port_level(DISP_DIGIT_11_CLK_MASK, true); // clock up
#endif		
	// digit 12
	PORTA_write_port( disp_led_array[11][i_column_number]&DISP_LINE_LEDS_MASK ); // load
     8ac:	89 81       	ldd	r24, Y+1	; 0x01
     8ae:	88 2f       	mov	r24, r24
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	8f 57       	subi	r24, 0x7F	; 127
     8b4:	9e 4f       	sbci	r25, 0xFE	; 254
     8b6:	fc 01       	movw	r30, r24
     8b8:	80 81       	ld	r24, Z
     8ba:	8d 7f       	andi	r24, 0xFD	; 253
     8bc:	0e 94 d6 00 	call	0x1ac	; 0x1ac <PORTA_write_port>
	PORTA_set_port_level(DISP_DIGIT_12_CLK_MASK, true); // clock up
     8c0:	61 e0       	ldi	r22, 0x01	; 1
     8c2:	82 e0       	ldi	r24, 0x02	; 2
     8c4:	0e 94 af 00 	call	0x15e	; 0x15e <PORTA_set_port_level>
	
	// enable current column
	if( 0 == i_column_number ){ PORTC_set_port_level(DISP_LED_COLUMN_1_MASK, false); }
     8c8:	89 81       	ldd	r24, Y+1	; 0x01
     8ca:	88 23       	and	r24, r24
     8cc:	29 f4       	brne	.+10     	; 0x8d8 <dispColumn+0x166>
     8ce:	60 e0       	ldi	r22, 0x00	; 0
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	0e 94 9d 01 	call	0x33a	; 0x33a <PORTC_set_port_level>
     8d6:	1f c0       	rjmp	.+62     	; 0x916 <__stack+0x17>
	else if( 1 == i_column_number ){ PORTC_set_port_level(DISP_LED_COLUMN_2_MASK, false); }
     8d8:	89 81       	ldd	r24, Y+1	; 0x01
     8da:	81 30       	cpi	r24, 0x01	; 1
     8dc:	29 f4       	brne	.+10     	; 0x8e8 <dispColumn+0x176>
     8de:	60 e0       	ldi	r22, 0x00	; 0
     8e0:	82 e0       	ldi	r24, 0x02	; 2
     8e2:	0e 94 9d 01 	call	0x33a	; 0x33a <PORTC_set_port_level>
     8e6:	17 c0       	rjmp	.+46     	; 0x916 <__stack+0x17>
	else if( 2 == i_column_number ){ PORTC_set_port_level(DISP_LED_COLUMN_3_MASK, false); }
     8e8:	89 81       	ldd	r24, Y+1	; 0x01
     8ea:	82 30       	cpi	r24, 0x02	; 2
     8ec:	29 f4       	brne	.+10     	; 0x8f8 <dispColumn+0x186>
     8ee:	60 e0       	ldi	r22, 0x00	; 0
     8f0:	80 e8       	ldi	r24, 0x80	; 128
     8f2:	0e 94 9d 01 	call	0x33a	; 0x33a <PORTC_set_port_level>
     8f6:	0f c0       	rjmp	.+30     	; 0x916 <__stack+0x17>
	else if( 3 == i_column_number ){ PORTC_set_port_level(DISP_LED_COLUMN_4_MASK, false); }
     8f8:	89 81       	ldd	r24, Y+1	; 0x01
     8fa:	83 30       	cpi	r24, 0x03	; 3
     8fc:	29 f4       	brne	.+10     	; 0x908 <__stack+0x9>
     8fe:	60 e0       	ldi	r22, 0x00	; 0
     900:	80 e4       	ldi	r24, 0x40	; 64
     902:	0e 94 9d 01 	call	0x33a	; 0x33a <PORTC_set_port_level>
     906:	07 c0       	rjmp	.+14     	; 0x916 <__stack+0x17>
	else if( 4 == i_column_number ){ PORTC_set_port_level(DISP_LED_COLUMN_5_MASK, false); }
     908:	89 81       	ldd	r24, Y+1	; 0x01
     90a:	84 30       	cpi	r24, 0x04	; 4
     90c:	21 f4       	brne	.+8      	; 0x916 <__stack+0x17>
     90e:	60 e0       	ldi	r22, 0x00	; 0
     910:	80 e2       	ldi	r24, 0x20	; 32
     912:	0e 94 9d 01 	call	0x33a	; 0x33a <PORTC_set_port_level>
		
	// digit clock down
	PORTB_set_port_level(DISP_DIGIT_1_CLK_MASK, false); // clock up
     916:	60 e0       	ldi	r22, 0x00	; 0
     918:	80 e8       	ldi	r24, 0x80	; 128
     91a:	0e 94 2e 01 	call	0x25c	; 0x25c <PORTB_set_port_level>
	PORTB_set_port_level(DISP_DIGIT_2_CLK_MASK, false); // clock up
     91e:	60 e0       	ldi	r22, 0x00	; 0
     920:	80 e4       	ldi	r24, 0x40	; 64
     922:	0e 94 2e 01 	call	0x25c	; 0x25c <PORTB_set_port_level>
	PORTB_set_port_level(DISP_DIGIT_3_CLK_MASK, false); // clock up
     926:	60 e0       	ldi	r22, 0x00	; 0
     928:	80 e2       	ldi	r24, 0x20	; 32
     92a:	0e 94 2e 01 	call	0x25c	; 0x25c <PORTB_set_port_level>
	PORTB_set_port_level(DISP_DIGIT_4_CLK_MASK, false); // clock up
     92e:	60 e0       	ldi	r22, 0x00	; 0
     930:	80 e1       	ldi	r24, 0x10	; 16
     932:	0e 94 2e 01 	call	0x25c	; 0x25c <PORTB_set_port_level>
	PORTB_set_port_level(DISP_DIGIT_5_CLK_MASK, false); // clock up
     936:	60 e0       	ldi	r22, 0x00	; 0
     938:	88 e0       	ldi	r24, 0x08	; 8
     93a:	0e 94 2e 01 	call	0x25c	; 0x25c <PORTB_set_port_level>
	PORTB_set_port_level(DISP_DIGIT_6_CLK_MASK, false); // clock up
     93e:	60 e0       	ldi	r22, 0x00	; 0
     940:	84 e0       	ldi	r24, 0x04	; 4
     942:	0e 94 2e 01 	call	0x25c	; 0x25c <PORTB_set_port_level>
	PORTB_set_port_level(DISP_DIGIT_7_CLK_MASK, false); // clock up
     946:	60 e0       	ldi	r22, 0x00	; 0
     948:	82 e0       	ldi	r24, 0x02	; 2
     94a:	0e 94 2e 01 	call	0x25c	; 0x25c <PORTB_set_port_level>
	PORTB_set_port_level(DISP_DIGIT_8_CLK_MASK, false); // clock up
     94e:	60 e0       	ldi	r22, 0x00	; 0
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	0e 94 2e 01 	call	0x25c	; 0x25c <PORTB_set_port_level>
#ifndef JTAG_DEBUG
	PORTC_set_port_level(DISP_DIGIT_9_CLK_MASK, false); // clock up
	PORTC_set_port_level(DISP_DIGIT_10_CLK_MASK, false); // clock up
	PORTC_set_port_level(DISP_DIGIT_11_CLK_MASK, false); // clock up
#endif
	PORTA_set_port_level(DISP_DIGIT_12_CLK_MASK, false); // clock up
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	82 e0       	ldi	r24, 0x02	; 2
     95a:	0e 94 af 00 	call	0x15e	; 0x15e <PORTA_set_port_level>
}
     95e:	00 00       	nop
     960:	0f 90       	pop	r0
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	08 95       	ret

00000968 <__vector_18>:
#include <compiler.h>

volatile uint32_t us_counter = 0;

ISR (TIMER0_OVF_vect)
{
     968:	1f 92       	push	r1
     96a:	0f 92       	push	r0
     96c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     970:	0f 92       	push	r0
     972:	11 24       	eor	r1, r1
     974:	8f 93       	push	r24
     976:	9f 93       	push	r25
     978:	af 93       	push	r26
     97a:	bf 93       	push	r27
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	cd b7       	in	r28, 0x3d	; 61
     982:	de b7       	in	r29, 0x3e	; 62
	us_counter += 2048;
     984:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <us_counter>
     988:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <us_counter+0x1>
     98c:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <us_counter+0x2>
     990:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <us_counter+0x3>
     994:	98 5f       	subi	r25, 0xF8	; 248
     996:	af 4f       	sbci	r26, 0xFF	; 255
     998:	bf 4f       	sbci	r27, 0xFF	; 255
     99a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <us_counter>
     99e:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <us_counter+0x1>
     9a2:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <us_counter+0x2>
     9a6:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <us_counter+0x3>
}
     9aa:	00 00       	nop
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	bf 91       	pop	r27
     9b2:	af 91       	pop	r26
     9b4:	9f 91       	pop	r25
     9b6:	8f 91       	pop	r24
     9b8:	0f 90       	pop	r0
     9ba:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     9be:	0f 90       	pop	r0
     9c0:	1f 90       	pop	r1
     9c2:	18 95       	reti

000009c4 <getUsCounter>:

uint32_t getUsCounter(void)
{
     9c4:	cf 93       	push	r28
     9c6:	df 93       	push	r29
     9c8:	cd b7       	in	r28, 0x3d	; 61
     9ca:	de b7       	in	r29, 0x3e	; 62
	return us_counter;
     9cc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <us_counter>
     9d0:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <us_counter+0x1>
     9d4:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <us_counter+0x2>
     9d8:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <us_counter+0x3>
     9dc:	bc 01       	movw	r22, r24
     9de:	cd 01       	movw	r24, r26
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	08 95       	ret

000009e6 <main>:
#include "display.h"

extern uint32_t getUsCounter(void);

int main(void)
{
     9e6:	ef 92       	push	r14
     9e8:	ff 92       	push	r15
     9ea:	0f 93       	push	r16
     9ec:	1f 93       	push	r17
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	00 d0       	rcall	.+0      	; 0x9f4 <main+0xe>
     9f4:	cd b7       	in	r28, 0x3d	; 61
     9f6:	de b7       	in	r29, 0x3e	; 62
	// debug
	static uint32_t l_time;

	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     9f8:	0e 94 5d 00 	call	0xba	; 0xba <atmel_start_init>

	/* Replace with your application code */
	
	// initialize display
	dispInit();
     9fc:	0e 94 33 02 	call	0x466	; 0x466 <dispInit>
	
	// debug
	l_time = getUsCounter();
     a00:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <getUsCounter>
     a04:	dc 01       	movw	r26, r24
     a06:	cb 01       	movw	r24, r22
     a08:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <l_time.2044>
     a0c:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <l_time.2044+0x1>
     a10:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <l_time.2044+0x2>
     a14:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <l_time.2044+0x3>
	
	// main loop
	while (1) {

		// debug
		if( (uint32_t)(getUsCounter()-l_time) > 250000 )
     a18:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <getUsCounter>
     a1c:	9b 01       	movw	r18, r22
     a1e:	ac 01       	movw	r20, r24
     a20:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <l_time.2044>
     a24:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <l_time.2044+0x1>
     a28:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <l_time.2044+0x2>
     a2c:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <l_time.2044+0x3>
     a30:	79 01       	movw	r14, r18
     a32:	8a 01       	movw	r16, r20
     a34:	e8 1a       	sub	r14, r24
     a36:	f9 0a       	sbc	r15, r25
     a38:	0a 0b       	sbc	r16, r26
     a3a:	1b 0b       	sbc	r17, r27
     a3c:	d8 01       	movw	r26, r16
     a3e:	c7 01       	movw	r24, r14
     a40:	81 39       	cpi	r24, 0x91	; 145
     a42:	90 4d       	sbci	r25, 0xD0	; 208
     a44:	a3 40       	sbci	r26, 0x03	; 3
     a46:	b1 05       	cpc	r27, r1
     a48:	08 f4       	brcc	.+2      	; 0xa4c <main+0x66>
     a4a:	44 c0       	rjmp	.+136    	; 0xad4 <main+0xee>
		{
			l_time += 250000;
     a4c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <l_time.2044>
     a50:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <l_time.2044+0x1>
     a54:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <l_time.2044+0x2>
     a58:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <l_time.2044+0x3>
     a5c:	80 57       	subi	r24, 0x70	; 112
     a5e:	9f 42       	sbci	r25, 0x2F	; 47
     a60:	ac 4f       	sbci	r26, 0xFC	; 252
     a62:	bf 4f       	sbci	r27, 0xFF	; 255
     a64:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <l_time.2044>
     a68:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <l_time.2044+0x1>
     a6c:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <l_time.2044+0x2>
     a70:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <l_time.2044+0x3>
			
			// toggle next pixel
			static uint8_t line_loop = 0;
			
			for( uint8_t l_digit_loop=0; l_digit_loop<DISP_NB_DIGITS; l_digit_loop++ )
     a74:	19 82       	std	Y+1, r1	; 0x01
     a76:	24 c0       	rjmp	.+72     	; 0xac0 <main+0xda>
			{
				for( uint8_t l_column_loop=0; l_column_loop<DISP_NB_COLUMNS; l_column_loop++ )
     a78:	1a 82       	std	Y+2, r1	; 0x02
     a7a:	1c c0       	rjmp	.+56     	; 0xab4 <main+0xce>
				{
					dispToggleLed(l_digit_loop,line_loop%DISP_NB_LINES,l_column_loop);
     a7c:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <line_loop.2045>
     a80:	85 e2       	ldi	r24, 0x25	; 37
     a82:	28 9f       	mul	r18, r24
     a84:	81 2d       	mov	r24, r1
     a86:	11 24       	eor	r1, r1
     a88:	92 2f       	mov	r25, r18
     a8a:	98 1b       	sub	r25, r24
     a8c:	96 95       	lsr	r25
     a8e:	89 0f       	add	r24, r25
     a90:	98 2f       	mov	r25, r24
     a92:	96 95       	lsr	r25
     a94:	96 95       	lsr	r25
     a96:	89 2f       	mov	r24, r25
     a98:	88 0f       	add	r24, r24
     a9a:	88 0f       	add	r24, r24
     a9c:	88 0f       	add	r24, r24
     a9e:	89 1b       	sub	r24, r25
     aa0:	92 2f       	mov	r25, r18
     aa2:	98 1b       	sub	r25, r24
     aa4:	4a 81       	ldd	r20, Y+2	; 0x02
     aa6:	69 2f       	mov	r22, r25
     aa8:	89 81       	ldd	r24, Y+1	; 0x01
     aaa:	0e 94 0c 03 	call	0x618	; 0x618 <dispToggleLed>
			// toggle next pixel
			static uint8_t line_loop = 0;
			
			for( uint8_t l_digit_loop=0; l_digit_loop<DISP_NB_DIGITS; l_digit_loop++ )
			{
				for( uint8_t l_column_loop=0; l_column_loop<DISP_NB_COLUMNS; l_column_loop++ )
     aae:	8a 81       	ldd	r24, Y+2	; 0x02
     ab0:	8f 5f       	subi	r24, 0xFF	; 255
     ab2:	8a 83       	std	Y+2, r24	; 0x02
     ab4:	8a 81       	ldd	r24, Y+2	; 0x02
     ab6:	85 30       	cpi	r24, 0x05	; 5
     ab8:	08 f3       	brcs	.-62     	; 0xa7c <main+0x96>
			l_time += 250000;
			
			// toggle next pixel
			static uint8_t line_loop = 0;
			
			for( uint8_t l_digit_loop=0; l_digit_loop<DISP_NB_DIGITS; l_digit_loop++ )
     aba:	89 81       	ldd	r24, Y+1	; 0x01
     abc:	8f 5f       	subi	r24, 0xFF	; 255
     abe:	89 83       	std	Y+1, r24	; 0x01
     ac0:	89 81       	ldd	r24, Y+1	; 0x01
     ac2:	8c 30       	cpi	r24, 0x0C	; 12
     ac4:	c8 f2       	brcs	.-78     	; 0xa78 <main+0x92>
				for( uint8_t l_column_loop=0; l_column_loop<DISP_NB_COLUMNS; l_column_loop++ )
				{
					dispToggleLed(l_digit_loop,line_loop%DISP_NB_LINES,l_column_loop);
				}
			}
			dispApply();
     ac6:	0e 94 f7 02 	call	0x5ee	; 0x5ee <dispApply>
			line_loop++;
     aca:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line_loop.2045>
     ace:	8f 5f       	subi	r24, 0xFF	; 255
     ad0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <line_loop.2045>
		}

		// display
		dispTick();
     ad4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <dispTick>
	}
     ad8:	9f cf       	rjmp	.-194    	; 0xa18 <main+0x32>

00000ada <PORTA_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTA_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
     ada:	cf 93       	push	r28
     adc:	df 93       	push	r29
     ade:	00 d0       	rcall	.+0      	; 0xae0 <PORTA_set_port_dir+0x6>
     ae0:	cd b7       	in	r28, 0x3d	; 61
     ae2:	de b7       	in	r29, 0x3e	; 62
     ae4:	89 83       	std	Y+1, r24	; 0x01
     ae6:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
     ae8:	8a 81       	ldd	r24, Y+2	; 0x02
     aea:	88 2f       	mov	r24, r24
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	81 30       	cpi	r24, 0x01	; 1
     af0:	91 05       	cpc	r25, r1
     af2:	99 f0       	breq	.+38     	; 0xb1a <PORTA_set_port_dir+0x40>
     af4:	82 30       	cpi	r24, 0x02	; 2
     af6:	91 05       	cpc	r25, r1
     af8:	d9 f0       	breq	.+54     	; 0xb30 <PORTA_set_port_dir+0x56>
     afa:	89 2b       	or	r24, r25
     afc:	09 f0       	breq	.+2      	; 0xb00 <PORTA_set_port_dir+0x26>
		DDRA &= ~mask;

		PORTA |= mask;
		break;
	default:
		break;
     afe:	2f c0       	rjmp	.+94     	; 0xb5e <PORTA_set_port_dir+0x84>
 */
static inline void PORTA_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRA &= ~mask;
     b00:	81 e2       	ldi	r24, 0x21	; 33
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	21 e2       	ldi	r18, 0x21	; 33
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	f9 01       	movw	r30, r18
     b0a:	20 81       	ld	r18, Z
     b0c:	32 2f       	mov	r19, r18
     b0e:	29 81       	ldd	r18, Y+1	; 0x01
     b10:	20 95       	com	r18
     b12:	23 23       	and	r18, r19
     b14:	fc 01       	movw	r30, r24
     b16:	20 83       	st	Z, r18
		break;
     b18:	22 c0       	rjmp	.+68     	; 0xb5e <PORTA_set_port_dir+0x84>
	case PORT_DIR_OUT:
		DDRA |= mask;
     b1a:	81 e2       	ldi	r24, 0x21	; 33
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	21 e2       	ldi	r18, 0x21	; 33
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	f9 01       	movw	r30, r18
     b24:	30 81       	ld	r19, Z
     b26:	29 81       	ldd	r18, Y+1	; 0x01
     b28:	23 2b       	or	r18, r19
     b2a:	fc 01       	movw	r30, r24
     b2c:	20 83       	st	Z, r18
		break;
     b2e:	17 c0       	rjmp	.+46     	; 0xb5e <PORTA_set_port_dir+0x84>
	case PORT_DIR_OFF:
		DDRA &= ~mask;
     b30:	81 e2       	ldi	r24, 0x21	; 33
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	21 e2       	ldi	r18, 0x21	; 33
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	f9 01       	movw	r30, r18
     b3a:	20 81       	ld	r18, Z
     b3c:	32 2f       	mov	r19, r18
     b3e:	29 81       	ldd	r18, Y+1	; 0x01
     b40:	20 95       	com	r18
     b42:	23 23       	and	r18, r19
     b44:	fc 01       	movw	r30, r24
     b46:	20 83       	st	Z, r18

		PORTA |= mask;
     b48:	82 e2       	ldi	r24, 0x22	; 34
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	22 e2       	ldi	r18, 0x22	; 34
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	f9 01       	movw	r30, r18
     b52:	30 81       	ld	r19, Z
     b54:	29 81       	ldd	r18, Y+1	; 0x01
     b56:	23 2b       	or	r18, r19
     b58:	fc 01       	movw	r30, r24
     b5a:	20 83       	st	Z, r18
		break;
     b5c:	00 00       	nop
	default:
		break;
	}
}
     b5e:	00 00       	nop
     b60:	0f 90       	pop	r0
     b62:	0f 90       	pop	r0
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	08 95       	ret

00000b6a <PORTB_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTB_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
     b6e:	00 d0       	rcall	.+0      	; 0xb70 <PORTB_set_port_dir+0x6>
     b70:	cd b7       	in	r28, 0x3d	; 61
     b72:	de b7       	in	r29, 0x3e	; 62
     b74:	89 83       	std	Y+1, r24	; 0x01
     b76:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
     b78:	8a 81       	ldd	r24, Y+2	; 0x02
     b7a:	88 2f       	mov	r24, r24
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	81 30       	cpi	r24, 0x01	; 1
     b80:	91 05       	cpc	r25, r1
     b82:	99 f0       	breq	.+38     	; 0xbaa <PORTB_set_port_dir+0x40>
     b84:	82 30       	cpi	r24, 0x02	; 2
     b86:	91 05       	cpc	r25, r1
     b88:	d9 f0       	breq	.+54     	; 0xbc0 <PORTB_set_port_dir+0x56>
     b8a:	89 2b       	or	r24, r25
     b8c:	09 f0       	breq	.+2      	; 0xb90 <PORTB_set_port_dir+0x26>
		DDRB &= ~mask;

		PORTB |= mask;
		break;
	default:
		break;
     b8e:	2f c0       	rjmp	.+94     	; 0xbee <PORTB_set_port_dir+0x84>
 */
static inline void PORTB_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~mask;
     b90:	84 e2       	ldi	r24, 0x24	; 36
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	24 e2       	ldi	r18, 0x24	; 36
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	f9 01       	movw	r30, r18
     b9a:	20 81       	ld	r18, Z
     b9c:	32 2f       	mov	r19, r18
     b9e:	29 81       	ldd	r18, Y+1	; 0x01
     ba0:	20 95       	com	r18
     ba2:	23 23       	and	r18, r19
     ba4:	fc 01       	movw	r30, r24
     ba6:	20 83       	st	Z, r18
		break;
     ba8:	22 c0       	rjmp	.+68     	; 0xbee <PORTB_set_port_dir+0x84>
	case PORT_DIR_OUT:
		DDRB |= mask;
     baa:	84 e2       	ldi	r24, 0x24	; 36
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	24 e2       	ldi	r18, 0x24	; 36
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	f9 01       	movw	r30, r18
     bb4:	30 81       	ld	r19, Z
     bb6:	29 81       	ldd	r18, Y+1	; 0x01
     bb8:	23 2b       	or	r18, r19
     bba:	fc 01       	movw	r30, r24
     bbc:	20 83       	st	Z, r18
		break;
     bbe:	17 c0       	rjmp	.+46     	; 0xbee <PORTB_set_port_dir+0x84>
	case PORT_DIR_OFF:
		DDRB &= ~mask;
     bc0:	84 e2       	ldi	r24, 0x24	; 36
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	24 e2       	ldi	r18, 0x24	; 36
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	f9 01       	movw	r30, r18
     bca:	20 81       	ld	r18, Z
     bcc:	32 2f       	mov	r19, r18
     bce:	29 81       	ldd	r18, Y+1	; 0x01
     bd0:	20 95       	com	r18
     bd2:	23 23       	and	r18, r19
     bd4:	fc 01       	movw	r30, r24
     bd6:	20 83       	st	Z, r18

		PORTB |= mask;
     bd8:	85 e2       	ldi	r24, 0x25	; 37
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	25 e2       	ldi	r18, 0x25	; 37
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	f9 01       	movw	r30, r18
     be2:	30 81       	ld	r19, Z
     be4:	29 81       	ldd	r18, Y+1	; 0x01
     be6:	23 2b       	or	r18, r19
     be8:	fc 01       	movw	r30, r24
     bea:	20 83       	st	Z, r18
		break;
     bec:	00 00       	nop
	default:
		break;
	}
}
     bee:	00 00       	nop
     bf0:	0f 90       	pop	r0
     bf2:	0f 90       	pop	r0
     bf4:	df 91       	pop	r29
     bf6:	cf 91       	pop	r28
     bf8:	08 95       	ret

00000bfa <PORTC_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTC_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
     bfa:	cf 93       	push	r28
     bfc:	df 93       	push	r29
     bfe:	00 d0       	rcall	.+0      	; 0xc00 <PORTC_set_port_dir+0x6>
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
     c04:	89 83       	std	Y+1, r24	; 0x01
     c06:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
     c08:	8a 81       	ldd	r24, Y+2	; 0x02
     c0a:	88 2f       	mov	r24, r24
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	81 30       	cpi	r24, 0x01	; 1
     c10:	91 05       	cpc	r25, r1
     c12:	99 f0       	breq	.+38     	; 0xc3a <PORTC_set_port_dir+0x40>
     c14:	82 30       	cpi	r24, 0x02	; 2
     c16:	91 05       	cpc	r25, r1
     c18:	d9 f0       	breq	.+54     	; 0xc50 <PORTC_set_port_dir+0x56>
     c1a:	89 2b       	or	r24, r25
     c1c:	09 f0       	breq	.+2      	; 0xc20 <PORTC_set_port_dir+0x26>
		DDRC &= ~mask;

		PORTC |= mask;
		break;
	default:
		break;
     c1e:	2f c0       	rjmp	.+94     	; 0xc7e <PORTC_set_port_dir+0x84>
 */
static inline void PORTC_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRC &= ~mask;
     c20:	87 e2       	ldi	r24, 0x27	; 39
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	27 e2       	ldi	r18, 0x27	; 39
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	f9 01       	movw	r30, r18
     c2a:	20 81       	ld	r18, Z
     c2c:	32 2f       	mov	r19, r18
     c2e:	29 81       	ldd	r18, Y+1	; 0x01
     c30:	20 95       	com	r18
     c32:	23 23       	and	r18, r19
     c34:	fc 01       	movw	r30, r24
     c36:	20 83       	st	Z, r18
		break;
     c38:	22 c0       	rjmp	.+68     	; 0xc7e <PORTC_set_port_dir+0x84>
	case PORT_DIR_OUT:
		DDRC |= mask;
     c3a:	87 e2       	ldi	r24, 0x27	; 39
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	27 e2       	ldi	r18, 0x27	; 39
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	f9 01       	movw	r30, r18
     c44:	30 81       	ld	r19, Z
     c46:	29 81       	ldd	r18, Y+1	; 0x01
     c48:	23 2b       	or	r18, r19
     c4a:	fc 01       	movw	r30, r24
     c4c:	20 83       	st	Z, r18
		break;
     c4e:	17 c0       	rjmp	.+46     	; 0xc7e <PORTC_set_port_dir+0x84>
	case PORT_DIR_OFF:
		DDRC &= ~mask;
     c50:	87 e2       	ldi	r24, 0x27	; 39
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	27 e2       	ldi	r18, 0x27	; 39
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	f9 01       	movw	r30, r18
     c5a:	20 81       	ld	r18, Z
     c5c:	32 2f       	mov	r19, r18
     c5e:	29 81       	ldd	r18, Y+1	; 0x01
     c60:	20 95       	com	r18
     c62:	23 23       	and	r18, r19
     c64:	fc 01       	movw	r30, r24
     c66:	20 83       	st	Z, r18

		PORTC |= mask;
     c68:	88 e2       	ldi	r24, 0x28	; 40
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	28 e2       	ldi	r18, 0x28	; 40
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	f9 01       	movw	r30, r18
     c72:	30 81       	ld	r19, Z
     c74:	29 81       	ldd	r18, Y+1	; 0x01
     c76:	23 2b       	or	r18, r19
     c78:	fc 01       	movw	r30, r24
     c7a:	20 83       	st	Z, r18
		break;
     c7c:	00 00       	nop
	default:
		break;
	}
}
     c7e:	00 00       	nop
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
     c84:	df 91       	pop	r29
     c86:	cf 91       	pop	r28
     c88:	08 95       	ret

00000c8a <PORTD_set_pin_pull_mode>:
 *
 * \param[in] pin       The pin number in PORTD
 * \param[in] pull_mode Pin pull mode
 */
static inline void PORTD_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
     c8a:	cf 93       	push	r28
     c8c:	df 93       	push	r29
     c8e:	00 d0       	rcall	.+0      	; 0xc90 <PORTD_set_pin_pull_mode+0x6>
     c90:	cd b7       	in	r28, 0x3d	; 61
     c92:	de b7       	in	r29, 0x3e	; 62
     c94:	89 83       	std	Y+1, r24	; 0x01
     c96:	6a 83       	std	Y+2, r22	; 0x02

	if (pull_mode == PORT_PULL_UP) {
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	81 30       	cpi	r24, 0x01	; 1
     c9c:	51 f5       	brne	.+84     	; 0xcf2 <PORTD_set_pin_pull_mode+0x68>

		DDRD &= ~(1 << pin);
     c9e:	8a e2       	ldi	r24, 0x2A	; 42
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	2a e2       	ldi	r18, 0x2A	; 42
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	f9 01       	movw	r30, r18
     ca8:	20 81       	ld	r18, Z
     caa:	62 2f       	mov	r22, r18
     cac:	29 81       	ldd	r18, Y+1	; 0x01
     cae:	42 2f       	mov	r20, r18
     cb0:	50 e0       	ldi	r21, 0x00	; 0
     cb2:	21 e0       	ldi	r18, 0x01	; 1
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <PORTD_set_pin_pull_mode+0x32>
     cb8:	22 0f       	add	r18, r18
     cba:	33 1f       	adc	r19, r19
     cbc:	4a 95       	dec	r20
     cbe:	e2 f7       	brpl	.-8      	; 0xcb8 <PORTD_set_pin_pull_mode+0x2e>
     cc0:	20 95       	com	r18
     cc2:	26 23       	and	r18, r22
     cc4:	fc 01       	movw	r30, r24
     cc6:	20 83       	st	Z, r18

		PORTD |= 1 << pin;
     cc8:	8b e2       	ldi	r24, 0x2B	; 43
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	2b e2       	ldi	r18, 0x2B	; 43
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	f9 01       	movw	r30, r18
     cd2:	20 81       	ld	r18, Z
     cd4:	62 2f       	mov	r22, r18
     cd6:	29 81       	ldd	r18, Y+1	; 0x01
     cd8:	42 2f       	mov	r20, r18
     cda:	50 e0       	ldi	r21, 0x00	; 0
     cdc:	21 e0       	ldi	r18, 0x01	; 1
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	02 c0       	rjmp	.+4      	; 0xce6 <PORTD_set_pin_pull_mode+0x5c>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	4a 95       	dec	r20
     ce8:	e2 f7       	brpl	.-8      	; 0xce2 <PORTD_set_pin_pull_mode+0x58>
     cea:	26 2b       	or	r18, r22
     cec:	fc 01       	movw	r30, r24
     cee:	20 83       	st	Z, r18
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
	}
}
     cf0:	18 c0       	rjmp	.+48     	; 0xd22 <PORTD_set_pin_pull_mode+0x98>
	if (pull_mode == PORT_PULL_UP) {

		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {
     cf2:	8a 81       	ldd	r24, Y+2	; 0x02
     cf4:	88 23       	and	r24, r24
     cf6:	a9 f4       	brne	.+42     	; 0xd22 <PORTD_set_pin_pull_mode+0x98>

		PORTD &= ~(1 << pin);
     cf8:	8b e2       	ldi	r24, 0x2B	; 43
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	2b e2       	ldi	r18, 0x2B	; 43
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	f9 01       	movw	r30, r18
     d02:	20 81       	ld	r18, Z
     d04:	62 2f       	mov	r22, r18
     d06:	29 81       	ldd	r18, Y+1	; 0x01
     d08:	42 2f       	mov	r20, r18
     d0a:	50 e0       	ldi	r21, 0x00	; 0
     d0c:	21 e0       	ldi	r18, 0x01	; 1
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	02 c0       	rjmp	.+4      	; 0xd16 <PORTD_set_pin_pull_mode+0x8c>
     d12:	22 0f       	add	r18, r18
     d14:	33 1f       	adc	r19, r19
     d16:	4a 95       	dec	r20
     d18:	e2 f7       	brpl	.-8      	; 0xd12 <PORTD_set_pin_pull_mode+0x88>
     d1a:	20 95       	com	r18
     d1c:	26 23       	and	r18, r22
     d1e:	fc 01       	movw	r30, r24
     d20:	20 83       	st	Z, r18
	}
}
     d22:	00 00       	nop
     d24:	0f 90       	pop	r0
     d26:	0f 90       	pop	r0
     d28:	df 91       	pop	r29
     d2a:	cf 91       	pop	r28
     d2c:	08 95       	ret

00000d2e <PORTD_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTD_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
     d2e:	cf 93       	push	r28
     d30:	df 93       	push	r29
     d32:	00 d0       	rcall	.+0      	; 0xd34 <PORTD_set_port_dir+0x6>
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
     d38:	89 83       	std	Y+1, r24	; 0x01
     d3a:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
     d3c:	8a 81       	ldd	r24, Y+2	; 0x02
     d3e:	88 2f       	mov	r24, r24
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	81 30       	cpi	r24, 0x01	; 1
     d44:	91 05       	cpc	r25, r1
     d46:	99 f0       	breq	.+38     	; 0xd6e <PORTD_set_port_dir+0x40>
     d48:	82 30       	cpi	r24, 0x02	; 2
     d4a:	91 05       	cpc	r25, r1
     d4c:	d9 f0       	breq	.+54     	; 0xd84 <PORTD_set_port_dir+0x56>
     d4e:	89 2b       	or	r24, r25
     d50:	09 f0       	breq	.+2      	; 0xd54 <PORTD_set_port_dir+0x26>
		DDRD &= ~mask;

		PORTD |= mask;
		break;
	default:
		break;
     d52:	2f c0       	rjmp	.+94     	; 0xdb2 <PORTD_set_port_dir+0x84>
 */
static inline void PORTD_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~mask;
     d54:	8a e2       	ldi	r24, 0x2A	; 42
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	2a e2       	ldi	r18, 0x2A	; 42
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	f9 01       	movw	r30, r18
     d5e:	20 81       	ld	r18, Z
     d60:	32 2f       	mov	r19, r18
     d62:	29 81       	ldd	r18, Y+1	; 0x01
     d64:	20 95       	com	r18
     d66:	23 23       	and	r18, r19
     d68:	fc 01       	movw	r30, r24
     d6a:	20 83       	st	Z, r18
		break;
     d6c:	22 c0       	rjmp	.+68     	; 0xdb2 <PORTD_set_port_dir+0x84>
	case PORT_DIR_OUT:
		DDRD |= mask;
     d6e:	8a e2       	ldi	r24, 0x2A	; 42
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	2a e2       	ldi	r18, 0x2A	; 42
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	f9 01       	movw	r30, r18
     d78:	30 81       	ld	r19, Z
     d7a:	29 81       	ldd	r18, Y+1	; 0x01
     d7c:	23 2b       	or	r18, r19
     d7e:	fc 01       	movw	r30, r24
     d80:	20 83       	st	Z, r18
		break;
     d82:	17 c0       	rjmp	.+46     	; 0xdb2 <PORTD_set_port_dir+0x84>
	case PORT_DIR_OFF:
		DDRD &= ~mask;
     d84:	8a e2       	ldi	r24, 0x2A	; 42
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	2a e2       	ldi	r18, 0x2A	; 42
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	f9 01       	movw	r30, r18
     d8e:	20 81       	ld	r18, Z
     d90:	32 2f       	mov	r19, r18
     d92:	29 81       	ldd	r18, Y+1	; 0x01
     d94:	20 95       	com	r18
     d96:	23 23       	and	r18, r19
     d98:	fc 01       	movw	r30, r24
     d9a:	20 83       	st	Z, r18

		PORTD |= mask;
     d9c:	8b e2       	ldi	r24, 0x2B	; 43
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	2b e2       	ldi	r18, 0x2B	; 43
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	f9 01       	movw	r30, r18
     da6:	30 81       	ld	r19, Z
     da8:	29 81       	ldd	r18, Y+1	; 0x01
     daa:	23 2b       	or	r18, r19
     dac:	fc 01       	movw	r30, r24
     dae:	20 83       	st	Z, r18
		break;
     db0:	00 00       	nop
	default:
		break;
	}
}
     db2:	00 00       	nop
     db4:	0f 90       	pop	r0
     db6:	0f 90       	pop	r0
     db8:	df 91       	pop	r29
     dba:	cf 91       	pop	r28
     dbc:	08 95       	ret

00000dbe <PORTD_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
     dbe:	cf 93       	push	r28
     dc0:	df 93       	push	r29
     dc2:	00 d0       	rcall	.+0      	; 0xdc4 <PORTD_set_pin_dir+0x6>
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
     dc8:	89 83       	std	Y+1, r24	; 0x01
     dca:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
     dcc:	8a 81       	ldd	r24, Y+2	; 0x02
     dce:	88 2f       	mov	r24, r24
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	81 30       	cpi	r24, 0x01	; 1
     dd4:	91 05       	cpc	r25, r1
     dd6:	e1 f0       	breq	.+56     	; 0xe10 <PORTD_set_pin_dir+0x52>
     dd8:	82 30       	cpi	r24, 0x02	; 2
     dda:	91 05       	cpc	r25, r1
     ddc:	71 f1       	breq	.+92     	; 0xe3a <PORTD_set_pin_dir+0x7c>
     dde:	89 2b       	or	r24, r25
     de0:	09 f0       	breq	.+2      	; 0xde4 <PORTD_set_pin_dir+0x26>
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
		break;
	default:
		break;
     de2:	55 c0       	rjmp	.+170    	; 0xe8e <PORTD_set_pin_dir+0xd0>
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
     de4:	8a e2       	ldi	r24, 0x2A	; 42
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	2a e2       	ldi	r18, 0x2A	; 42
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	f9 01       	movw	r30, r18
     dee:	20 81       	ld	r18, Z
     df0:	62 2f       	mov	r22, r18
     df2:	29 81       	ldd	r18, Y+1	; 0x01
     df4:	42 2f       	mov	r20, r18
     df6:	50 e0       	ldi	r21, 0x00	; 0
     df8:	21 e0       	ldi	r18, 0x01	; 1
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <PORTD_set_pin_dir+0x44>
     dfe:	22 0f       	add	r18, r18
     e00:	33 1f       	adc	r19, r19
     e02:	4a 95       	dec	r20
     e04:	e2 f7       	brpl	.-8      	; 0xdfe <PORTD_set_pin_dir+0x40>
     e06:	20 95       	com	r18
     e08:	26 23       	and	r18, r22
     e0a:	fc 01       	movw	r30, r24
     e0c:	20 83       	st	Z, r18
		break;
     e0e:	3f c0       	rjmp	.+126    	; 0xe8e <PORTD_set_pin_dir+0xd0>
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
     e10:	8a e2       	ldi	r24, 0x2A	; 42
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	2a e2       	ldi	r18, 0x2A	; 42
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	f9 01       	movw	r30, r18
     e1a:	20 81       	ld	r18, Z
     e1c:	62 2f       	mov	r22, r18
     e1e:	29 81       	ldd	r18, Y+1	; 0x01
     e20:	42 2f       	mov	r20, r18
     e22:	50 e0       	ldi	r21, 0x00	; 0
     e24:	21 e0       	ldi	r18, 0x01	; 1
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <PORTD_set_pin_dir+0x70>
     e2a:	22 0f       	add	r18, r18
     e2c:	33 1f       	adc	r19, r19
     e2e:	4a 95       	dec	r20
     e30:	e2 f7       	brpl	.-8      	; 0xe2a <PORTD_set_pin_dir+0x6c>
     e32:	26 2b       	or	r18, r22
     e34:	fc 01       	movw	r30, r24
     e36:	20 83       	st	Z, r18
		break;
     e38:	2a c0       	rjmp	.+84     	; 0xe8e <PORTD_set_pin_dir+0xd0>
	case PORT_DIR_OFF:
		DDRD &= ~(1 << pin);
     e3a:	8a e2       	ldi	r24, 0x2A	; 42
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	2a e2       	ldi	r18, 0x2A	; 42
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	f9 01       	movw	r30, r18
     e44:	20 81       	ld	r18, Z
     e46:	62 2f       	mov	r22, r18
     e48:	29 81       	ldd	r18, Y+1	; 0x01
     e4a:	42 2f       	mov	r20, r18
     e4c:	50 e0       	ldi	r21, 0x00	; 0
     e4e:	21 e0       	ldi	r18, 0x01	; 1
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <PORTD_set_pin_dir+0x9a>
     e54:	22 0f       	add	r18, r18
     e56:	33 1f       	adc	r19, r19
     e58:	4a 95       	dec	r20
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <PORTD_set_pin_dir+0x96>
     e5c:	20 95       	com	r18
     e5e:	26 23       	and	r18, r22
     e60:	fc 01       	movw	r30, r24
     e62:	20 83       	st	Z, r18

		PORTD |= 1 << pin;
     e64:	8b e2       	ldi	r24, 0x2B	; 43
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	2b e2       	ldi	r18, 0x2B	; 43
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	f9 01       	movw	r30, r18
     e6e:	20 81       	ld	r18, Z
     e70:	62 2f       	mov	r22, r18
     e72:	29 81       	ldd	r18, Y+1	; 0x01
     e74:	42 2f       	mov	r20, r18
     e76:	50 e0       	ldi	r21, 0x00	; 0
     e78:	21 e0       	ldi	r18, 0x01	; 1
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <PORTD_set_pin_dir+0xc4>
     e7e:	22 0f       	add	r18, r18
     e80:	33 1f       	adc	r19, r19
     e82:	4a 95       	dec	r20
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <PORTD_set_pin_dir+0xc0>
     e86:	26 2b       	or	r18, r22
     e88:	fc 01       	movw	r30, r24
     e8a:	20 83       	st	Z, r18
		break;
     e8c:	00 00       	nop
	default:
		break;
	}
}
     e8e:	00 00       	nop
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	df 91       	pop	r29
     e96:	cf 91       	pop	r28
     e98:	08 95       	ret

00000e9a <PORTD_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
     e9a:	cf 93       	push	r28
     e9c:	df 93       	push	r29
     e9e:	00 d0       	rcall	.+0      	; 0xea0 <PORTD_set_pin_level+0x6>
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	89 83       	std	Y+1, r24	; 0x01
     ea6:	6a 83       	std	Y+2, r22	; 0x02
	if (level) {
     ea8:	8a 81       	ldd	r24, Y+2	; 0x02
     eaa:	88 23       	and	r24, r24
     eac:	a9 f0       	breq	.+42     	; 0xed8 <PORTD_set_pin_level+0x3e>
		PORTD |= 1 << pin;
     eae:	8b e2       	ldi	r24, 0x2B	; 43
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	2b e2       	ldi	r18, 0x2B	; 43
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	f9 01       	movw	r30, r18
     eb8:	20 81       	ld	r18, Z
     eba:	62 2f       	mov	r22, r18
     ebc:	29 81       	ldd	r18, Y+1	; 0x01
     ebe:	42 2f       	mov	r20, r18
     ec0:	50 e0       	ldi	r21, 0x00	; 0
     ec2:	21 e0       	ldi	r18, 0x01	; 1
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <PORTD_set_pin_level+0x32>
     ec8:	22 0f       	add	r18, r18
     eca:	33 1f       	adc	r19, r19
     ecc:	4a 95       	dec	r20
     ece:	e2 f7       	brpl	.-8      	; 0xec8 <PORTD_set_pin_level+0x2e>
     ed0:	26 2b       	or	r18, r22
     ed2:	fc 01       	movw	r30, r24
     ed4:	20 83       	st	Z, r18
	} else {
		PORTD &= ~(1 << pin);
	}
}
     ed6:	15 c0       	rjmp	.+42     	; 0xf02 <PORTD_set_pin_level+0x68>
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
     ed8:	8b e2       	ldi	r24, 0x2B	; 43
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	2b e2       	ldi	r18, 0x2B	; 43
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	f9 01       	movw	r30, r18
     ee2:	20 81       	ld	r18, Z
     ee4:	62 2f       	mov	r22, r18
     ee6:	29 81       	ldd	r18, Y+1	; 0x01
     ee8:	42 2f       	mov	r20, r18
     eea:	50 e0       	ldi	r21, 0x00	; 0
     eec:	21 e0       	ldi	r18, 0x01	; 1
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <PORTD_set_pin_level+0x5c>
     ef2:	22 0f       	add	r18, r18
     ef4:	33 1f       	adc	r19, r19
     ef6:	4a 95       	dec	r20
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <PORTD_set_pin_level+0x58>
     efa:	20 95       	com	r18
     efc:	26 23       	and	r18, r22
     efe:	fc 01       	movw	r30, r24
     f00:	20 83       	st	Z, r18
	}
}
     f02:	00 00       	nop
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	08 95       	ret

00000f0e <PD0_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PD0_set_pull_mode(const enum port_pull_mode pull_mode)
{
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	1f 92       	push	r1
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_pull_mode(0, pull_mode);
     f1a:	69 81       	ldd	r22, Y+1	; 0x01
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	0e 94 45 06 	call	0xc8a	; 0xc8a <PORTD_set_pin_pull_mode>
}
     f22:	00 00       	nop
     f24:	0f 90       	pop	r0
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	08 95       	ret

00000f2c <PD0_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PD0_set_dir(const enum port_dir dir)
{
     f2c:	cf 93       	push	r28
     f2e:	df 93       	push	r29
     f30:	1f 92       	push	r1
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
     f36:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(0, dir);
     f38:	69 81       	ldd	r22, Y+1	; 0x01
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	0e 94 df 06 	call	0xdbe	; 0xdbe <PORTD_set_pin_dir>
}
     f40:	00 00       	nop
     f42:	0f 90       	pop	r0
     f44:	df 91       	pop	r29
     f46:	cf 91       	pop	r28
     f48:	08 95       	ret

00000f4a <PD1_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PD1_set_dir(const enum port_dir dir)
{
     f4a:	cf 93       	push	r28
     f4c:	df 93       	push	r29
     f4e:	1f 92       	push	r1
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(1, dir);
     f56:	69 81       	ldd	r22, Y+1	; 0x01
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	0e 94 df 06 	call	0xdbe	; 0xdbe <PORTD_set_pin_dir>
}
     f5e:	00 00       	nop
     f60:	0f 90       	pop	r0
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	08 95       	ret

00000f68 <PD1_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PD1_set_level(const bool level)
{
     f68:	cf 93       	push	r28
     f6a:	df 93       	push	r29
     f6c:	1f 92       	push	r1
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
     f72:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(1, level);
     f74:	69 81       	ldd	r22, Y+1	; 0x01
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	0e 94 4d 07 	call	0xe9a	; 0xe9a <PORTD_set_pin_level>
}
     f7c:	00 00       	nop
     f7e:	0f 90       	pop	r0
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	08 95       	ret

00000f86 <sysctrl_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
     f8e:	40 e0       	ldi	r20, 0x00	; 0
     f90:	60 e8       	ldi	r22, 0x80	; 128
     f92:	81 e6       	ldi	r24, 0x61	; 97
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	0e 94 27 08 	call	0x104e	; 0x104e <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
     f9a:	83 e5       	ldi	r24, 0x53	; 83
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	fc 01       	movw	r30, r24
     fa0:	10 82       	st	Z, r1
	       (0 << SE);

	MCUCR = (0 << PUD);
     fa2:	85 e5       	ldi	r24, 0x55	; 85
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	fc 01       	movw	r30, r24
     fa8:	10 82       	st	Z, r1

	ENABLE_INTERRUPTS();
     faa:	78 94       	sei

	return 0;
     fac:	80 e0       	ldi	r24, 0x00	; 0
}
     fae:	df 91       	pop	r29
     fb0:	cf 91       	pop	r28
     fb2:	08 95       	ret

00000fb4 <mcu_init>:
#define MCU_RESET_CAUSE_EXT (1 << EXTRF)
#define MCU_RESET_CAUSE_BOR (1 << BORF)
#define MCU_RESET_CAUSE_WDT (1 << WDRF)

static inline void mcu_init(void)
{
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR0 = (1 << PRSPI) | (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI) | (1 << PRUSART1)
     fbc:	84 e6       	ldi	r24, 0x64	; 100
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	2f ef       	ldi	r18, 0xFF	; 255
     fc2:	fc 01       	movw	r30, r24
     fc4:	20 83       	st	Z, r18
	       | (1 << PRUSART0) | (1 << PRADC);

	/* Set all pins to low power mode */
	PORTA_set_port_dir(0xff, PORT_DIR_OFF);
     fc6:	62 e0       	ldi	r22, 0x02	; 2
     fc8:	8f ef       	ldi	r24, 0xFF	; 255
     fca:	0e 94 6d 05 	call	0xada	; 0xada <PORTA_set_port_dir>
	PORTB_set_port_dir(0xff, PORT_DIR_OFF);
     fce:	62 e0       	ldi	r22, 0x02	; 2
     fd0:	8f ef       	ldi	r24, 0xFF	; 255
     fd2:	0e 94 b5 05 	call	0xb6a	; 0xb6a <PORTB_set_port_dir>
	PORTC_set_port_dir(0xff, PORT_DIR_OFF);
     fd6:	62 e0       	ldi	r22, 0x02	; 2
     fd8:	8f ef       	ldi	r24, 0xFF	; 255
     fda:	0e 94 fd 05 	call	0xbfa	; 0xbfa <PORTC_set_port_dir>
	PORTD_set_port_dir(0xff, PORT_DIR_OFF);
     fde:	62 e0       	ldi	r22, 0x02	; 2
     fe0:	8f ef       	ldi	r24, 0xFF	; 255
     fe2:	0e 94 97 06 	call	0xd2e	; 0xd2e <PORTD_set_port_dir>
}
     fe6:	00 00       	nop
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	08 95       	ret

00000fee <TIMER_0_initialization>:

#include "driver_init.h"
#include <system.h>

void TIMER_0_initialization(void)
{
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62

	TIMER_0_init();
     ff6:	0e 94 2e 08 	call	0x105c	; 0x105c <TIMER_0_init>
}
     ffa:	00 00       	nop
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	08 95       	ret

00001002 <USART_0_initialization>:

/* configure pins and initialize registers */
void USART_0_initialization(void)
{
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62

	// Set pin direction to input
	PD0_set_dir(PORT_DIR_IN);
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	0e 94 96 07 	call	0xf2c	; 0xf2c <PD0_set_dir>

	PD0_set_pull_mode(
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	0e 94 87 07 	call	0xf0e	; 0xf0e <PD0_set_pull_mode>
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	// Set pin direction to output
	PD1_set_dir(PORT_DIR_OUT);
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	0e 94 a5 07 	call	0xf4a	; 0xf4a <PD1_set_dir>

	PD1_set_level(
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	0e 94 b4 07 	call	0xf68	; 0xf68 <PD1_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
    1022:	0e 94 49 08 	call	0x1092	; 0x1092 <USART_0_init>
}
    1026:	00 00       	nop
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	08 95       	ret

0000102e <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
    1036:	0e 94 da 07 	call	0xfb4	; 0xfb4 <mcu_init>

	sysctrl_init();
    103a:	0e 94 c3 07 	call	0xf86	; 0xf86 <sysctrl_init>

	TIMER_0_initialization();
    103e:	0e 94 f7 07 	call	0xfee	; 0xfee <TIMER_0_initialization>

	USART_0_initialization();
    1042:	0e 94 01 08 	call	0x1002	; 0x1002 <USART_0_initialization>
}
    1046:	00 00       	nop
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	08 95       	ret

0000104e <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
    104e:	2f b7       	in	r18, 0x3f	; 63
	cli
    1050:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
    1052:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
    1054:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
    1056:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
    1058:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
    105a:	08 95       	ret

0000105c <TIMER_0_init>:
 * \brief Initialize TIMER_0 interface
 *
 * \return Initialization status.
 */
int8_t TIMER_0_init()
{
    105c:	cf 93       	push	r28
    105e:	df 93       	push	r29
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62

	/* Enable TC0 */
	PRR0 &= ~(1 << PRTIM0);
    1064:	84 e6       	ldi	r24, 0x64	; 100
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	24 e6       	ldi	r18, 0x64	; 100
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	f9 01       	movw	r30, r18
    106e:	20 81       	ld	r18, Z
    1070:	2f 7d       	andi	r18, 0xDF	; 223
    1072:	fc 01       	movw	r30, r24
    1074:	20 83       	st	Z, r18

	// TCCR0A = (0 << COM0A1) | (0 << COM0A0) /* Normal port operation, OCA disconnected */
	//		 | (0 << COM0B1) | (0 << COM0B0) /* Normal port operation, OCB disconnected */
	//		 | (0 << WGM01) | (0 << WGM00); /* TC8 Mode 0 Normal */

	TCCR0B = 0                                          /* TC8 Mode 0 Normal */
    1076:	85 e4       	ldi	r24, 0x45	; 69
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	23 e0       	ldi	r18, 0x03	; 3
    107c:	fc 01       	movw	r30, r24
    107e:	20 83       	st	Z, r18
	         | (0 << CS02) | (1 << CS01) | (1 << CS00); /* IO clock divided by 64 */

	TIMSK0 = 0 << OCIE0B   /* Output Compare B Match Interrupt Enable: disabled */
    1080:	8e e6       	ldi	r24, 0x6E	; 110
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	21 e0       	ldi	r18, 0x01	; 1
    1086:	fc 01       	movw	r30, r24
    1088:	20 83       	st	Z, r18

	// GTCCR = 0 << TSM /* Timer/Counter Synchronization Mode: disabled */
	//		 | 0 << PSRASY /* Prescaler Reset Timer/Counter2: disabled */
	//		 | 0 << PSRSYNC; /* Prescaler Reset: disabled */

	return 0;
    108a:	80 e0       	ldi	r24, 0x00	; 0
}
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	08 95       	ret

00001092 <USART_0_init>:
 * \return Initialization status.
 * \retval 0 the USART init was successful
 * \retval 1 the USART init was not successful
 */
int8_t USART_0_init()
{
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62

	// Module is in UART mode

	/* Enable USART0 */
	PRR0 &= ~(1 << PRUSART0);
    109a:	84 e6       	ldi	r24, 0x64	; 100
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	24 e6       	ldi	r18, 0x64	; 100
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	f9 01       	movw	r30, r18
    10a4:	20 81       	ld	r18, Z
    10a6:	2d 7f       	andi	r18, 0xFD	; 253
    10a8:	fc 01       	movw	r30, r24
    10aa:	20 83       	st	Z, r18

#define BAUD 250000

#include <utils/setbaud.h>

	UBRR0H = UBRRH_VALUE;
    10ac:	85 ec       	ldi	r24, 0xC5	; 197
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	fc 01       	movw	r30, r24
    10b2:	10 82       	st	Z, r1
	UBRR0L = UBRRL_VALUE;
    10b4:	84 ec       	ldi	r24, 0xC4	; 196
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	21 e0       	ldi	r18, 0x01	; 1
    10ba:	fc 01       	movw	r30, r24
    10bc:	20 83       	st	Z, r18

	UCSR0A = USE_2X << U2X0 /*  */
    10be:	80 ec       	ldi	r24, 0xC0	; 192
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	fc 01       	movw	r30, r24
    10c4:	10 82       	st	Z, r1
	         | 0 << MPCM0;  /* Multi-processor Communication Mode: disabled */

	UCSR0B = 1 << RXCIE0    /* RX Complete Interrupt Enable: enabled */
    10c6:	81 ec       	ldi	r24, 0xC1	; 193
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	28 e9       	ldi	r18, 0x98	; 152
    10cc:	fc 01       	movw	r30, r24
    10ce:	20 83       	st	Z, r18
	// UCSR0C = (0 << UMSEL01) | (0 << UMSEL00) /*  */
	//		 | (0 << UPM01) | (0 << UPM00) /* Disabled */
	//		 | 0 << USBS0 /* USART Stop Bit Select: disabled */
	//		 | (1 << UCSZ01) | (1 << UCSZ00); /* 8-bit */

	return 0;
    10d0:	80 e0       	ldi	r24, 0x00	; 0
}
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	08 95       	ret

000010d8 <memcpy>:
    10d8:	fb 01       	movw	r30, r22
    10da:	dc 01       	movw	r26, r24
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <memcpy+0xa>
    10de:	01 90       	ld	r0, Z+
    10e0:	0d 92       	st	X+, r0
    10e2:	41 50       	subi	r20, 0x01	; 1
    10e4:	50 40       	sbci	r21, 0x00	; 0
    10e6:	d8 f7       	brcc	.-10     	; 0x10de <memcpy+0x6>
    10e8:	08 95       	ret

000010ea <memset>:
    10ea:	dc 01       	movw	r26, r24
    10ec:	01 c0       	rjmp	.+2      	; 0x10f0 <memset+0x6>
    10ee:	6d 93       	st	X+, r22
    10f0:	41 50       	subi	r20, 0x01	; 1
    10f2:	50 40       	sbci	r21, 0x00	; 0
    10f4:	e0 f7       	brcc	.-8      	; 0x10ee <memset+0x4>
    10f6:	08 95       	ret

000010f8 <_exit>:
    10f8:	f8 94       	cli

000010fa <__stop_program>:
    10fa:	ff cf       	rjmp	.-2      	; 0x10fa <__stop_program>
